/**
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

Time complexity : \mathcal{O}(m n)O(mn) as it follows quite straightforward for the inserted loops.
Space complexity : \mathcal{O}(m n)O(mn) since at each step we keep the results of all previous computations.
**/

class Solution {
    public int minDistance(String word1, String word2) {
        int nw1 = word1.length();
        int nw2 = word2.length();
        
        int[][] D = new int[nw1+1][nw2+1];
        
        for(int row=0; row<nw1+1; row++)
            D[row][0] = row;
        
        for(int col=0; col<nw2+1; col++)
            D[0][col] = col;
        
        for(int row=1; row<nw1+1; row++)
        {
            for(int col=1; col<nw2+1; col++)
            {
                if(word1.charAt(row-1)==word2.charAt(col-1))
                    D[row][col] = 1 + Math.min(D[row-1][col-1]-1, Math.min(D[row-1][col], D[row][col-1]));
                else
                    D[row][col] = 1 + Math.min(D[row-1][col-1], Math.min(D[row-1][col], D[row][col-1]));
            }
        }
        
        return D[nw1][nw2];
    }
}
