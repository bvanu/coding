/* Code: https://www.online-java.com/1RNpXuGFzZ
Optimized: https://www.online-java.com/ayNSErvhkn
Eg:
Input:
JINGLEBELLS
Output:
I N G L E
B S A C D
F H K M O
P Q R T U
V W X Y Z
 
CypherDecrypt:
Input: "RMROENAQUEANWRBS", "instacart", 'j', 'i'
Output:“CONGRATULATIONSX”

TC: O(5*5)
SC: O(5*5) + O(26) which is O(1)
*/

import java.lang.*;
import java.util.*;

class Main
{
    int n = 5;
    
    public static void main(String[] args)
    {
        Main cm = new Main();
        
        // cm.cypherMatrix("instacart", 'j', 'i');
        // cm.cypherMatrix("jinglebells", 'j', 'i');
        
        cm.cypherDecrypt("RMROENAQUEANWRBS", "instacart", 'j', 'i');
    }
    
    public char[][] cypherMatrix(String word, char targetChar, char replaceChar)
    {
        char[][] encodedMatrix = new char[n][n];
        boolean[] used = new boolean[26];
        int count = 0;
        
        used[targetChar-'a'] = true;
        
        for(char c: word.toCharArray())
        {
            int index = c-'a';
            
            if(used[index])
                continue;
            
            if(c == targetChar)
                c = replaceChar;
                
            used[index] = true;
            
            encodedMatrix[count/5][count%5] = (char)(index + 'A');
            
            count++;
        }
        
        for(int i=0; i<used.length; i++)
        {
            if(used[i])
                continue;
            
            used[i] = true; // Doesn't really matter
            encodedMatrix[count/5][count%5] = (char)(i + 'A');
            count++;
        }
        
        // PRINT OUTPUT
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                System.out.print(encodedMatrix[i][j] + "\t");
            }
            System.out.println();
        }
        System.out.println();
        
        return encodedMatrix;
    }
    
    public String cypherDecrypt(String encryptedString, String key, char targetChar, char replaceChar)
    {
        char[][] cyphMatrix = cypherMatrix(key, 'j', 'i');
        Map<Character, int[]> map= new HashMap<>(); // Pair<Integer, Integer>
        StringBuilder decryptedString = new StringBuilder();
        
        // Pouplate the indexes
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                map.put(cyphMatrix[i][j], new int[]{i, j});
            }
        }
        
        // Decode the encryptedString
        for(int i=0; i<encryptedString.length()-1; i=i+2)
        {
            char c1 = encryptedString.charAt(i);
            char c2 = encryptedString.charAt(i+1);
            
            if(!map.containsKey(c1) || !map.containsKey(c2))
                return null;
            
            int[] index1 = map.get(c1);
            int[] index2 = map.get(c2);
            
            // 1. Are 2 chars on the same column?
            if(index1[1] == index2[1])
            {
                decryptedString.append(cyphMatrix[(index1[0]-1+5)%5][index1[1]]);
                decryptedString.append(cyphMatrix[(index2[0]-1+5)%5][index2[1]]);
            }
            // 2. Are 2 chars on the same row?
            else if(index1[0] == index2[0])
            {
                decryptedString.append(cyphMatrix[index1[0]][(index1[1]-1+5)%5]);
                decryptedString.append(cyphMatrix[index2[0]][(index2[1]-1+5)%5]);
            }
            // Otherwise
            else{
                decryptedString.append(cyphMatrix[index1[0]][index2[1]]);
                decryptedString.append(cyphMatrix[index2[0]][index1[1]]);
            }
        }
        
        System.out.println("DecryptedString: " + decryptedString.toString());
        return decryptedString.toString();
    }
}
