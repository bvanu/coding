/*
Is It A BST
Given a binary tree, check if it is a binary search tree (BST). A valid BST does not have to be complete or balanced.

Consider the below definition of a BST:
All nodes values of left subtree are less than or equal to parent node value
All nodes values of right subtree are greater than or equal to parent node value
Both left subtree and right subtree must be a BST
By definition, NULL tree is a BST
By definition, trees having a single node or leaf nodes are BST.

Example One:
Input:
        100
   200       300
Output: false
Left child value 200 is greater than the parent node value 100; violates the definition of BST.

Example Two:
Input:
        200
   100       300
Output: true

private static class TreeNode{
    public int val;
    public TreeNode left_ptr;
    public TreeNode right_ptr;
}

TC: O(n) - we need to traverse all nodes and check if it holds BST property
SC: O(height of tree) - for recursive stack.
*/

static boolean isBST(TreeNode root){
    if(root == null)
        return true;

    return isBST_helper(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
}

static boolean isBST_helper(TreeNode node, int min, int max)
{
    // 1. Base case, validation
    if(node.val < min || node.val > max)
        return false;

    // 2. Recursive case
    // 2i. Is left subTree a BST?
    boolean isLeftBST = (node.left_ptr == null) ? true : isBST_helper(node.left_ptr, min, node.val);

    // Baktracking case, so that if subTree is not a BST, then no need to go furhter down or to right subTree
    if(!isLeftBST)
        return false;

    // 2ii. Is right subTree a BST?
    return (node.right_ptr == null) ? true : isBST_helper(node.right_ptr, node.val, max);
}



/**
Brute-force algorithm

TC: O(n * logn) - n for travesing all nodes and logn to getMin() and getMax()
SC: O(height * height) - at each recursive stack we either getMin() or getMax()
**/

static boolean isBST(TreeNode root){
    if(root == null) 
        return true;

    return helper(root);
}

private static boolean helper(TreeNode node)
{
    // 1. Base case if leaf and breaking case
    if(node.left_ptr == null && node.right_ptr == null)
        return true;

    if(node.val < getMax(node.left_ptr) || node.val > getMin(node.right_ptr)) // Here left_ptr or right_ptr might be null. Above we checked for if both are null case only.
    {
        return false;
    }

    // 2. Recursive case
    // 2i. Left and backtracking case
    if(node.left_ptr != null)
    { 
        boolean isLeftBST = helper(node.left_ptr);

        if(!isLeftBST)
            return false;
    }

    if(node.right_ptr != null)
    {
        return helper(node.right_ptr);
    }

    return true; // This handles the case if either of left or right node is null
}

private static int getMin(TreeNode node)
{
    if(node == null)
        return Integer.MAX_VALUE;  // This is called by rightSubTree, so min value is set to inf

    while(node.left_ptr != null)
    {
        node = node.left_ptr;
    }

    return node.val;
}

private static int getMax(TreeNode node)
{
    if(node == null)
        return Integer.MIN_VALUE; // This is called by leftSubTree, so max value is se to -inf

    while(node.right_ptr != null)
    {
        node = node.right_ptr;
    }

    return node.val;
}
