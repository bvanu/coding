/*
static class TreeNode
{
    int label;
    Vector<TreeNode> children = new Vector<TreeNode>(0);
    TreeNode(int _label)
    {
        label = _label;
        children.clear();
    }
};

Given an n-ary tree, list the labels of the nodes, level by level from left to right.
Input:
         1
   3     4    2
5    6  
Output: [ [ 1 ],
	       [ 3, 4, 2 ],
         [ 5, 6 ] ] 
         
TC: O(n) need to travesr all nodes in tree
SC: O(n) for subLsit and output
*/
public static List<List<Integer>> level_order(TreeNode root)
    {List<List<Integer>> result = new ArrayList<>();

    // Empty tree case
    if(root == null)
        return result;

    level_order_traversal_helper(root, result);

    return result;
}

private static void level_order_traversal_helper(TreeNode root, List<List<Integer>> result)
{
    // 1. Basic null check fro empty tree (this is double checking as we already checked in above method)
    if(root == null)
        return;

    // 2. Iterative approach
    Queue<TreeNode> que = new LinkedList<TreeNode>();
    que.add(root);
    int qSize;
    TreeNode temp;
    List<Integer> subList;

    while(!que.isEmpty())
    {
        qSize = que.size();
        subList = new ArrayList<Integer>();

        for(int i=0; i<qSize; i++)
        {
            temp = que.remove();
            subList.add(temp.label);

            //  As it is n-Array tree, we need to add all the n childer to queue
            if(temp.children != null)
            {
                for(TreeNode child: temp.children)
                {
                     que.add(child);
                }
            }
        }

        result.add(subList);
    }
}
