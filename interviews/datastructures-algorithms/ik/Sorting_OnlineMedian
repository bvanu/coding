
/**
Online Median

Given a list of numbers, the task is to insert these numbers into a stream and find the median of the stream after each insertion. If the median is a non-integer, consider itâ€™s floor value.
The median of a sorted array is defined as the middle element when the number of elements is odd and the mean of the middle two elements when the number of elements is even.

Example
Input: [3, 8, 5, 2]
Output: [3, 5, 5, 4]

Iteration   Stream       Sorted Stream   Median
1           [3]          [3]             3
2           [3, 8]       [3, 8]          (3 + 8) / 2 => 5
3           [3, 8, 5]    [3, 5, 8]       5
4           [3, 8, 5, 2] [2, 3, 5, 8]    (3 + 5) / 2 => 4

Notes
Constraints:
1 <= length of stream <= 10^5.
0 <= any value in the stream <= 10^5.
The stream can contain duplicates.

Approach:
1. Maintain 2 heaps left heap (maxHeap) and right heap (minHeap).
2. Maintain sizes of heap such that maxHeap.size() == minHeap.size() or maxHeap.size() = minHeap.size()+1
3. At any given time, max element on left side is on top of the maxHeap and min element on right side is on top of minHeap.
4. If odd, minHeap.size is 1 greater and top of lement is median, otherwise get peek of 2 heaps and get average.

TC: O(nlogn/2) to insert into either left heap or right heap
SC: O(n)
    
**/

public static List<Integer> online_median(List<Integer> stream) {
    if(stream == null || stream.size() < 1)
        return null;

    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>((a,b)-> b-a);
    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>((a,b)-> a-b);
    List<Integer> medians = new ArrayList<Integer>();
    int temp = 0;

    for(int num: stream)
    {
        // 1. Maintain equal or 1 element more in maxHeap always
        if(maxHeap.size() <= minHeap.size())
        {
            // (i). Check if this num should go on left heap or right heap
            if(!minHeap.isEmpty() && num > minHeap.peek())
            {
                temp = minHeap.poll();
                minHeap.add(num);
                maxHeap.add(temp);
            }
            else
            {
                maxHeap.add(num);
            }
        }
        // 2. Else put in minHeap (right array)
        else
        {
            // (i). Check if this should go on left heap
            if(!maxHeap.isEmpty() && num < maxHeap.peek())
            {
                temp = maxHeap.poll();
                maxHeap.add(num);
                minHeap.add(temp);
            }
            else
            {
                minHeap.add(num);
            }
        }

        /**
        System.out.println("MaxHeap:");
        Iterator it = maxHeap.iterator();
        while(it.hasNext())
        {
            System.out.println(it.next());
        }

        System.out.println("MinHeap:");
        it = minHeap.iterator();
        while(it.hasNext())
        {
            System.out.println(it.next());
        }
        **/

        if(maxHeap.size() == minHeap.size())
        {

            medians.add((maxHeap.peek() + minHeap.peek())/2);
        }
        else
        {
            medians.add(maxHeap.peek());
        }
    }

    return medians;
}
