/**
Count Basins
Given the altitudes of the regions on a surface, determine the basins where water would collect if poured onto that surface.
Region whose four neighbors (right, left, up and down) are all higher in altitude is called a sink. All the water would collect in sinks. If a region is not a sink, it is guaranteed to have a single lowest neighbor where water will drain to. All regions that drain to a particular sink–directly or indirectly–collectively form one basin. Partition the surface into the basins and return their sizes in the non-decreasing order.

Example One
Input:
[[1, 5, 2],
 [2, 4, 7],
 [3, 6, 9]]
Output: [2, 7]
There are two basins, one consists of two cells and the other consists of seven. They are labeled with A’s and B’s here:
 B B A
 B B A
 B B B
The sink of basin A is cell (0, 2). The sink of basin B is cell (0, 0).

Example Two
Input:
[[0, 2, 1, 3],
 [2, 1, 0, 4],
 [3, 3, 3, 3],
 [5, 5, 2, 1]]
Output: [4, 5, 7]
There are three basins. They are labeled with A, B and C here: 
B B C C
B C C C
B C C A
B A A A
The sinks of basins A, B and C are (3, 3), (0, 0) and (1, 2) respectively.

Notes
Input Parameters: The function has one argument, a two-dimensional array of integers representing the altitudes of the regions of a rectangular surface.
Output: Return an array of integers representing the sizes of basins in the non-decreasing order.

Constraints:
1 <= total number of regions on the given surface <= 1000000
0 <= altitude of any region on the surface <= 1000000

Custom Input
Input Format:
The first line of the input contains the number of rows of the surface.
The second line of the input contains the number of columns of the surface.
The remaining lines of the input represent the rows of the surface: the numbers (columns) in each row are separated by a single space.
For example, if the surface is defined by matrix = [ [1, 5, 2], [2, 4, 7], [3, 6, 9]], the corresponding custom input would be:

3
3
1 5 2 
2 4 7 
3 6 9

Output Format:
Eaсh number in the returned array should appear on its own line. For example, the correct answer for matrix = [ [1, 5, 2], [2, 4, 7], [3, 6, 9]] would be [2, 7] and the corresponding custom output would be:
2
7

Complexity Analysis:
TC: O(m*n*logk) we iterate over each cell and dfs takes logk
SC: O(m*n) to storer sinkIdArray
**/

    static int[][] directions = {{1,0}, {0,1}, {-1,0}, {0,-1}};
    static int[][] sinkIdArray;
    static int id = 1;
    
    public static List<Integer> find_basins(List<List<Integer>> matrix) {
       // 1. Null checks
       List<Integer> result = new ArrayList<>();
       if(matrix == null || matrix.size() < 1)
        return result;
        
        // 2. Iterate over matrix adn fill in sinkIdArray
        // SinkIdArray each cell represents the sinkId number
        int m = matrix.size();
        int n = matrix.get(0).size();
        sinkIdArray = new int[m][n];
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                // 2.1. Do dfs of each cell if it is not already visited
                if(sinkIdArray[i][j] == 0)
                {
                    int sinkId = dfs(i, j, matrix);
                    // 2.2. Increment the id, if that id has already been used
                    if(sinkId == id) id++; 
                }
            }
        }
        
        
        // 3. Iterate over sinkIdArray matrix and count cells having distinct ids
        for(int i=1; i<id; i++)
        {
            result.add(0);
        }
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                int index = sinkIdArray[i][j]-1;
                result.set(index, result.get(index)+1); // ?? no null pointer?
            }
        }
        
        // 4. Sort the count
        Collections.sort(result);
        
        // Return the result
        return result;
    }
    
    private static int dfs(int x, int y, List<List<Integer>> matrix) 
    {
        // 2.1.1. gets the sink  in the neighbouring  cells
        int[] sinkCell = getSinkCell(x, y, matrix);
        int x1 = sinkCell[0];
        int y1 = sinkCell[1];
        
        // 2.1.2. Check if the sinkCell is same as the current cell, if so assign the id
        if(x1 == x && y1 == y)
        {
            sinkIdArray[x][y] = id;
            return sinkIdArray[x][y];
        }
        
        // 2.1.3. Check if the currentCell's sinkCell is already visited. 
        // This means we already found the sinkCell of that cell.Assing that id to curr cell
        // If not find the "sinkCell" of that current sink cell
        if(sinkIdArray[x1][y1] != 0)
        {
            sinkIdArray[x][y] = sinkIdArray[x1][y1];
        }
        else
        {
            sinkIdArray[x][y] = dfs(x1, y1, matrix);
        }
        
        return sinkIdArray[x][y];
    }
    
    private static int[] getSinkCell(int x, int y, List<List<Integer>> matrix)
    {
        int min = matrix.get(x).get(y);
        int[] result = {x, y};
        
        for(int[] dir: directions)
        {
            int x1 = dir[0]+x;
            int y1 = dir[1]+y;
            
            if(x1>=0 && x1<matrix.size() && y1>=0 && y1<matrix.get(0).size())
            {
                if(matrix.get(x1).get(y1) < min)
                {
                    min = matrix.get(x1).get(y1);
                    result[0] = x1;
                    result[1] = y1;
                }
            }
        }
        
        return result;
    }
}
