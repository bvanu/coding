/*
Construct A Binary Search Tree From Its Preorder Traversal
Construct a Binary Search Tree whose preorder traversal matches with a given list.

Example One
Input: [ 1, 0, 2 ]
Output: 
      1
0           2

Example Two:
Input: [ 2, 0, 1, 3, 5, 4 ]
Output:
            2
      0             3
null      1    null     5
                     4    null
Constraints:
1 <= Array Size <= 105.
-109 <= Numbers in the array <= 109.
Numbers in the input array are unique. 


class TreeNode {
    public int label;
    public TreeNode left_ptr;
    public TreeNode right_ptr;

    public TreeNode(){
        this.left_ptr = null;
        this.right_ptr = null;
    }

    public TreeNode(int label){
        this.label = label;
        this.left_ptr = null;
        this.right_ptr = null;
    }
}


TC: O(nlogn) - O(nlong) for soritng list to get inorder and o(n) to reavesre all nodes
SC: O(n) - O(2n) for inorder hashmap and list and O(height) for recursive stack
    

*/

// Build a HashMap <Value, Index> of inorder for easy lookup, as we will be searching for root again nd again
static Map<Integer, Integer> inorderMap;

static TreeNode build_binary_search_tree(ArrayList<Integer> preorder) {
    if(preorder == null || preorder.size() < 1)
        return null;

    ArrayList<Integer> inorder = new ArrayList<>(preorder);
    Collections.sort(inorder); // TC: O(nlogn) for sorting the array

    inorderMap = new HashMap<Integer, Integer>();
    int i = 0;
    for(int val: inorder)
    {
        inorderMap.put(val, i++);
    }

    return build_binary_search_tree_helper(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1);
}

static TreeNode build_binary_search_tree_helper(ArrayList<Integer> preorder, int ps, int pe, ArrayList<Integer> inorder, int is, int ie)
{
    // 1. Base case, if no more elements to process
    if(ps>pe)
        return null;

    // 2. Recursive case, build left subTree and build right subTree
    // 2i. Get root, this will be the first elemnt in preorder (R, l ,r) list.
    TreeNode root = new TreeNode(preorder.get(ps));

    // 2ii. Get root index from inorder list
    int rootIndex = inorderMap.get(root.label);

    // 2iii. Make left and right recursive calls, to build left and right subtrees
    // Get left counter, this gives how many elemnts in left subtree. We can go to preorder list and get how many fall into the left subTree
    int leftCounter = rootIndex-is; 
    root.left_ptr = build_binary_search_tree_helper(preorder, ps+1, ps+leftCounter, inorder, is, rootIndex-1);

    root.right_ptr = build_binary_search_tree_helper(preorder, ps+leftCounter+1, pe, inorder, rootIndex+1, ie);

    return root;
}
