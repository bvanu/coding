/*
Search For The Largest Island
Given a two-dimensional array containing 0s and 1s, find the size of the largest island. If there is no island return 0.
An island is a group of 1s connected vertically or horizontally.

Example One
Input: grid = [
	[1, 1, 0],
	[1, 1, 0],
	[0, 0, 1],
]
Output: 4
There are two islands:
1) [(0, 0), (0, 1), (1, 0), (1, 1)]
2) [(2, 2)]
The size of the largest island is 4.

Example Two
Input: grid = [
	[0, 0, 0],
	[0, 0, 0],
	[0, 0, 0],
]
Output: 0

Constraints:
1 <= number of rows <= 200
1 <= number of columns <= 200

TC: O(m*n*K) K will be equal to the numberofIslands.
SC: O(m*n) for Visisted array, 
    O(4) for Queue as in queue at max you store 4 neighbours
    = Total O(m*n)
*/
public static int max_island_size(List<List<Integer>> matrix) {
// Write your code here
    if(matrix == null || matrix.size() < 1)
        return 0;

    // 1. Iterate over the matrix and do BFS/DSF for that node if not visited.
    // 2. Num of Island == number of items you call BFS.
    // Suppose if there is only one island, then all the nodes will be covered in first BFS and hence the Numislands == 1
    int m = matrix.size();
    int n = matrix.get(0).size();
    int numIslands = 0;
    int[][] visited = new int[m][n];
    int islandSize, maxIslandSize = 0;

    for(int i=0; i<m; i++)
    {
        for(int j=0; j<n; j++)
        {
            if(matrix.get(i).get(j) == 1 && visited[i][j] != 1)
            {
                islandSize = bfs(matrix, visited, i, j);

                if(islandSize > maxIslandSize)
                    maxIslandSize = islandSize;
            }
        }
    }

    return maxIslandSize;

}

private static int bfs(List<List<Integer>> matrix, int[][] visited, int i, int j)
{
    if(matrix == null || matrix.size() < 1)
        return 0;

    int islandSize = 0;
    Queue<List<Integer>> que = new LinkedList<>();
    que.add(new ArrayList<Integer>(Arrays.asList(i, j)));
    visited[i][j] = 1;

    while(!que.isEmpty())
    {
        islandSize++;
        List<Integer> curr = que.remove();
        List<List<Integer>> neighbours = getNeighbours(matrix, curr.get(0), curr.get(1));

        for(List<Integer> neighbour: neighbours)
        {
            // Because of time and space optimization in getNeighbours, no need to check this, (matrix.get(neighbour.get(0)).get(neighbour.get(1)) == 1 && ... )
            if(visited[neighbour.get(0)][neighbour.get(1)] != 1)
            {
                visited[neighbour.get(0)][neighbour.get(1)] = 1;
                que.add(new ArrayList<Integer>(Arrays.asList(neighbour.get(0),neighbour.get(1))));
            }
        }
    }

    return islandSize;
}

private static List<List<Integer>> getNeighbours(List<List<Integer>> matrix, int i, int j)
{
    int m = matrix.size();
    int n = matrix.get(0).size();
    List<List<Integer>> neighbours = new ArrayList<>();

    // *** Optimization. Add neigbours only if it is a LAND.
    if(i-1>=0 && matrix.get(i-1).get(j) != 0) neighbours.add(new ArrayList<Integer>(Arrays.asList(i-1, j)));
    if(j-1>=0 && matrix.get(i).get(j-1) != 0) neighbours.add(new ArrayList<Integer>(Arrays.asList(i, j-1)));
    if(j+1<n && matrix.get(i).get(j+1) != 0) neighbours.add(new ArrayList<Integer>(Arrays.asList(i, j+1)));
    if(i+1<m && matrix.get(i+1).get(j) != 0) neighbours.add(new ArrayList<Integer>(Arrays.asList(i+1, j)));

    return neighbours;
}
