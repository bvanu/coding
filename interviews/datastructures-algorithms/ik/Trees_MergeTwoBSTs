/*
Merge Two BSTs
Given two Binary Search Trees (BSTs), your task is to merge them into a single height-balanced BST. 

Example One
Input:
    2               3
 1     2         3    null
Output:
              2
      1           3
null      2   null    3  

Notes:
A node having value equal to the value of the root node can be inserted in any of its left or right subtree.
A binary tree is called height-balanced if for each node in the binary tree, the following property is satisfied: 
The difference in the heights of its left and right subtrees do not differ by more than one.

Constraints:
1 <= Number of nodes in the given BSTs <= 104.
-109 <= Node values <= 109.

private static class TreeNode{
    public int val;
    public TreeNode left_ptr;
    public TreeNode right_ptr;
}

TC: O(nlogn) we need to traverse through all nodes and logn for sorting the 2 input arrays at first
SC: O(n) - to store sorted arr and to store tree
*/

static TreeNode merge_two_BSTs(TreeNode root1, TreeNode root2){
    if(root1 == null && root2 == null)
        return null;
    if(root1 == null)
        return root2;
    if(root2 == null)
        return root1;

    // TC: O(m+n). Store 2 lists in Inorder fashion so thery are sorted as Trees are BST.
    // For merging these 2 arrays we need O(m+n) time using merge or quick sort
    // SC: O(m+n) for stroing in array
    List<Integer> arr = new ArrayList<>();
    copyToList(root1, arr);
    copyToList(root2, arr);

    Collections.sort(arr);

    return build_BST_helper(arr, 0, arr.size()-1);
}

// In- order
private static void copyToList(TreeNode node, List<Integer> arr)
{
    if(node == null) return;

    copyToList(node.left_ptr, arr);
    arr.add(node.val);
    copyToList(node.right_ptr, arr);
}

private static TreeNode build_BST_helper(List<Integer> arr, int s, int e)
{
    // 1. Base case, leaf node children
    if(s > e)
        return null;

    // 2. Recursive approach
    int rootIndex = s +(e-s)/2;
    TreeNode root = new TreeNode(arr.get(rootIndex));

    // 2i. Go left
    root.left_ptr = build_BST_helper(arr, s, rootIndex-1);

    // 2ii. Go right
    root.right_ptr = build_BST_helper(arr, rootIndex+1, e);

    return root;
}
