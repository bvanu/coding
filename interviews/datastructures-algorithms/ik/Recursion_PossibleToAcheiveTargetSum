/*
Possible To Achieve Target Sum?
Given a set of integers and a target value k, find a non-empty subset that sums up to k.

Example One
Input: [2 4 8], k = 6
Output: True
Because 2+4=6.

Example Two
Input: [2 4 6], k = 5
Output: False
Because no subset of numbers from the input sums up to 5.

Notes
Input Parameters: Function has two arguments: an array of integers (their order doesnâ€™t matter) and the target value  k.
Output: Function must return a boolean value.

Constraints:
1 <= size of the input array <= 18
-10^12 <= elements of the array, k <= 10^12
*/

/* 
Appraoch: OPTIMIZED

TC: O(2^n) - no slate we store sum
SC: O(n) - for recursive stack, I don't store slate anymore
**/

static boolean check_if_sum_possible(long[] arr, long k) {
    if(arr == null || arr.length <1)
        return false;

    int i = 0;
    long sum = 0;
    int count = 0; // thsi si to cover edge case where arr has negative elements and k = 0. Problem is to return non-empty subset.

    helper(arr, i, sum, k, count);

    return helper(arr, i, sum, k, count);
}

private static boolean helper(long[] arr, int i, long sum, long k, int count)
{
    // 0. Backtracking case. Found the targett sum so return true
    if(sum == k && count>0)
    {
        return true;
    }
    // 1. Base case. Reached end of tree, so terminate
    if(i == arr.length)
    {
        return false;
    }
    // 2. Recursive case
    // 2i. Inclusion
    boolean res = helper(arr, i+1, sum+arr[i], k , count+1);
    // Below check sends back if true to the upper sub tree (no need to traverse the remaning tree) 
    if(res == true)
        return true;

    // 2ii. Exclusion
    return helper(arr, i+1, sum, k, count); // Count is same as we are not using any element
}



/*
Approach: BRUTE FORCE
1. Generated all possible susbsets.
2. did backtracking for target sum and added it to result.

TC: O(n*2^n) - n is for slate of each subset
SC: O(n*2^n)
*/
static boolean check_if_sum_possible(long[] arr, long k) {
    if(arr == null || arr.length <1)
        return false;

    int n = arr.length;
    int i = 0;
    List<Long> slate = new ArrayList<Long>();
    List<List<Long>> result = new ArrayList<>();

    helper(arr, n, i, k, slate, result);

    if( result.size()>0 )
        return true;
    else
        return false;
}

private static void helper(long[] arr, int n, int i, long k, List<Long> slate, List<List<Long>> result)
{
    // 0. Backtracking case, where we find the result
    if(slate.size()>0)
    {
        long sum = 0;

        for(long val: slate)
            sum += val;

        if(k == sum)
        {
            result.add(new ArrayList<Long>(slate)); // How to break recursion here??
        }
    }
    // 1. Base case
    if(n == 0)
    {
        return; // Because the if target sum was acheived we should have captured above and returned true there. Otherwise we come here as we don't find anything we return false;
    }
    // 2. Recursion case
    else
    {
        // 2i. Exclusion
        helper(arr, n-1, i+1, k, slate, result);

        // 2ii. Inclusion
        slate.add(arr[i]);
        helper(arr, n-1, i+1, k, slate, result);
        slate.remove(slate.size()-1);
    }
}

