/**
Merge k Sorted Singly Linked Lists:

Given k singly linked lists where each linked list is sorted in ascending order, merge all of them into a single sorted linked list. 

Example:
Input: [ [1 -> 3 -> 5], [3 -> 4], [7] ]. 
Output: 1 -> 3 -> 3 -> 4 -> 5 -> 7

Constraints:

0 <= k <= 104.
0 <= Length of each linked list <= 103.
-109 <= Node values <= 109.
Sum of the lengths of all linked lists wonâ€™t exceed 105.

Approach:
In bottom up fashion, try merging 2 linked lists at a time and then merge those result and  so on. Similar to merge sort approach but here we are merging 2 linked lists.

TC: O(nlogk) - O(m+n) to merge 2 linked lists and O(logk) linked lists to merge
SC: O(1) no aux space used.

**/

public static SinglyLinkedListNode merge_k_lists(List<SinglyLinkedListNode> lists) {
    if(lists == null || lists.size() <1)
        return null;
    return merge_k_lists_helper(lists, 0, lists.size()-1);
}

private static SinglyLinkedListNode merge_k_lists_helper(List<SinglyLinkedListNode> lists, int start, int end)
{
    if(start < end)
    {
        int mid = start + (end-start)/2;

        return merge_2_lists(merge_k_lists_helper(lists, start, mid), merge_k_lists_helper(lists, mid+1, end));
    }

    return lists.get(start); // this is start == end case
}
    
private static SinglyLinkedListNode merge_2_lists(SinglyLinkedListNode node1, SinglyLinkedListNode node2)
{
    SinglyLinkedListNode head = new SinglyLinkedListNode(0);
    SinglyLinkedListNode curr = head;

    while(node1 != null && node2 != null)
    {
        if(node1.data <= node2.data)
        {
            curr.next = node1;
            curr = curr.next;
            node1 = node1.next;
        }
        else
        {
            curr.next = node2;
            curr = curr.next;
            node2 = node2.next;
        }
    }

    if(node1 != null)
        curr.next = node1;
    if(node2 != null)
        curr.next = node2;

    return head.next;
}
