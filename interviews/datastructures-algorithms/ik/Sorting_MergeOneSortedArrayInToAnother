
/*
 Merge One Sorted Array Into Another

Given two arrays:
1) arr1 of size n, which contains n positive integers sorted in the ascending order.
2) arr2 of size (2*n) (twice the size of first), which contains n positive integers sorted in the ascending order in its first half. Second half of this array arr2 is empty. (Empty elements are marked by 0).

Write a function that takes these two arrays, and merges the first one into second one, resulting in an increasingly sorted array of (2*n) positive integers. 


Example
Input:
n = 3
arr1 = [1 3 5]
arr2 = [2 4 6 0 0 0]

Output: arr2 = [1 2 3 4 5 6]

Notes
Input Parameters: There are two arguments. First one is an integer array denoting arr1 and second one is also an integer array denoting arr2.
Output: You don't have to return anything. You just need to modify the given array arr2.

Constraints:
1 <= n <= 10^5
1 <= arr1[i] <= 2 * 10^9
1 <= arr2[i] <= 2 * 10^9 (for the first half)
arr2[i] = 0 (for the second half)
You can use only constant extra space.
0 denotes an empty space.

TC: O(n)
SC: O(1)
**/

public void merger_first_into_second(int[] arr1, int[] arr2) {
    // Merge arr1 into arr2
    int m = arr1.length;
    int n = arr2.length;
    int i = m-1;
    int j = n-1;
    int k = n-1;

    while(arr2[j]==0)
        j--;

    while(i>=0 && j>=0)
    {
        if(arr1[i] > arr2[j])
            arr2[k--] = arr1[i--];
        else
            arr2[k--] = arr2[j--];    
    }

    while(i>=0)
        arr2[k--] = arr1[i--];
}
