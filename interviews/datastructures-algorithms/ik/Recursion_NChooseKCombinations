/**
N Choose K Combinations

Given two integers n and k, find all the possible unique combinations of k numbers in range 1 to n.

Example One:

Input: 5, 2

Output: [[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]].

Example Two:

Input: 6, 6
Output: [[1, 2, 3, 4, 5, 6]].

Notes:

The answer can be returned in any order.

Constraints:

1 <= n <= 20
1 <= k <= n

Approach:
1. Combinations is based on (i) inclusion (ii) exclusion aproach at each stage.
2. In Combinations as order doesn't matter we don't care about which element comes first.

TC: O(n * 2^n)
SC: O(n * 2^n)
**/

public static List<List<Integer>> find_combinations(int n, int k) {
    if(n<k) 
        return new ArrayList<>();

    int i =0;
    List<Integer> arr = new ArrayList<>();
    List<Integer> slate = new ArrayList<>();
    List<List<Integer>> result = new ArrayList<>();

    // Form the input array
    for(int j=1; j<=n; j++)
    {
        arr.add(j);
    }

    helper(arr, n, i, k, slate, result);

    return result;
}


private static void helper(List<Integer> arr, int n, int i, int k, List<Integer> slate, List<List<Integer>> result)
{
    // 0. Backtracking case here. Once slate size is 2, we add it to result and terminate traversing down the path
    if(slate.size() == k)
    {
        result.add(new ArrayList<Integer>(slate));
        return;
    }
    // 1. Base case
    else if(n == 0)
    {
        return;
    }
    // 2. Recursive case
    else
    {
        // 2.i. Exclusion
        helper(arr, n-1, i+1, k, slate, result);

        // 2.ii. Inclusion
        slate.add(arr.get(i));
        helper(arr, n-1, i+1, k, slate, result);
        slate.remove(slate.size()-1);
    }
}
