/*Print All Paths Of A Tree

Given a binary tree, return all paths from root to leaf.

Example One

Input:
        1
  2            3
4    5      6     7

Output: [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7]]
There are four leafs in the given graph, so we have four paths: from the root to every leaf. Each path is a list of the values from the tree nodes on the path, and we have four lists. They can go in any order.

private static class TreeNode{
    public int val;
    public TreeNode left_ptr;
    public TreeNode right_ptr;
}

TC: O(nlogn) - traverse all n nodes and for copying slate to res, it takes logn (or height) time. Beacuse slate (subList) length will be the height of the tree
SC: O(nlogn) - for stroing output and also O(height of the tree) for recursive stack.
*/

/*
    Complete the function below
    Input: root of the input tree
    Output: A list of integer lists denoting the node values of the paths of the tree
*/
static List<List<Integer> > allPathsOfABinaryTree(TreeNode root){
    List<List<Integer>> result = new ArrayList<>();

    // Is empty tree?
    if(root == null)
        return result;

    List<Integer> slate = new ArrayList<>();

    helper(root, slate, result);

    return result;
}

static void helper(TreeNode node, List<Integer> slate, List<List<Integer>> result)
{
    // * Sandwich patter start
    slate.add(node.val);

    // 1. Base case, if leaf node add slate to res. Slate contains the entire path.
    if(node.left_ptr == null && node.right_ptr == null)
    {
        result.add(new ArrayList<Integer>(slate)); // Create a new space for slate and copy it over there. ELse whenever slate changes this val in res also changes.

        // **2 Sandwich pattern end
        slate.remove(slate.size()-1); // While retruning back the res, give the manager the variables he gave
        return;
    }            

    // 2. Recursive case
    // 2i. Go left
    if(node.left_ptr != null)
    {
        helper(node.left_ptr, slate, result);
    }
    // 2ii. Go right
    if(node.right_ptr != null)
    {
        helper(node.right_ptr, slate, result);
    }

    // **2 Sandwich pattern end
    slate.remove(slate.size()-1); // While retruning back the res, give the manager the variables he gave
}
