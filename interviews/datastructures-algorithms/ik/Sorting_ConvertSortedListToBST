/*
Convert Sorted List To Binary Search Tree
Given a singly linked list with elements sorted in ascending order, your task is to convert it into a height-balanced binary search tree.

Input: [ -1, 2, 3, 5, 6, 7, 10]
Output:
          5
    2          7
-1      3   6       10

For your reference:
class SinglyLinkedListNode {
    public Integer data;
    public SinglyLinkedListNode next;

    SinglyLinkedListNode(Integer node_data) {
        this.data = node_data;
        this.next = null;
    }
};

class TreeNode{
    public int val;
    public TreeNode left_ptr;
    public TreeNode right_ptr;

    public TreeNode(int val){
        this.val = val;
        this.left_ptr = null;
        this.right_ptr = null;
    }
};

Approach:
1. Take mid as root and construct left and right subtrees and assign them to root.
2. Do it recursively

TC: O(n) - traverse all nodes
SC: O(n) - for recursive stack and store output

*/


static TreeNode sorted_list_to_bst(SinglyLinkedListNode head) {
    // Empty LinkedList?
    if(head == null)
        return null;

    SinglyLinkedListNode curr = head;
    List<Integer> list = new ArrayList<Integer>();
    while(curr != null)
    {
        list.add(curr.data);
        curr = curr.next;
    }

    return build_bst_helper(list, 0, list.size()-1);
}

static TreeNode build_bst_helper(List<Integer> list, int start, int end)
{
    // 1. Base case, no more elements to process
    if(start > end) // Don't onsider start==end as this is leaft node and it has to be inluded
        return null;

    // 2. Recursive case. Build left and right subtrees recursively
    int mid = start + (end-start)/2;
    TreeNode root = new TreeNode(list.get(mid));
    //System.out.println(root.val);

    // 2i. Build left sub tree
    root.left_ptr = build_bst_helper(list, start, mid-1); // MID-1

    // 2ii. Build right sub tree
    root.right_ptr = build_bst_helper(list, mid+1, end);

    return root;
}
