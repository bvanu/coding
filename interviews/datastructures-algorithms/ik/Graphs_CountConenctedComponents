
/*
Count Connected Components In An Undirected Graph
Given an undirected graph, find its total number of connected components.

Example One
Input:
n = 5
edges = [
[0 , 1],
[1 , 2],
[0 , 2],
[3 , 4]
]
Output: 2

//1. Build graph
 0 -> [1,2]
 1 -> [0,2]
 2 -> [1,0]
 3 -> [4]
 4 -> [3]

TC: O(m) for builiding the graph
    O(n) for bfs ?? in worst case each vertex is independent
SC: O(n+2m) for adjacency list
    O(degree of Vertex) for Queue in bfs
    = O(n+m) total
 */
 
public static int number_of_connected_components(int n, List<List<Integer>> edges) {
    // ** Edge case: If there is single node and no edges tehn retrun 1
    if(edges == null || edges.size()<1)
        return n;

    // 1. Build graph
    List<List<Integer>> adjList= new ArrayList<>();
    for(int i=0; i<n; i++)
    {
        adjList.add(new ArrayList<>());
    }

    for(List<Integer> edge: edges)
    {
        adjList.get(edge.get(0)).add(edge.get(1));
        adjList.get(edge.get(1)).add(edge.get(0));
    }

    /* for(List<Integer> list: adjList) { System.out.println(list.toString());} */

    // 2. Traverse unvisited nodes and do bfs/dfs. How many times bfs/dfs is calles, those many connected components exist.
    //n is the number of vertics and they are from 0 to 4, other wise we can usea  list to store the vertex objects
    int[] visited = new int[n];
    int numComponents = 0;

    for(int i=0; i<n; i++)
    {
        if(visited[i] != 1)
        {
            //System.out.println("bfs("+ i + ")");
            bfs(i, adjList, visited);
            numComponents++;
        }
    }

    return numComponents;
}

private static void bfs(int source, List<List<Integer>> adjList, int[] visited)
{
    Queue<Integer> que = new LinkedList<>();
    que.add(source);
    visited[source] = 1;

    while(!que.isEmpty())
    {
        for(int edge: adjList.get(que.remove()))
        {
            // If there are loops in graph, this filters that out.
            if(visited[edge] != 1)
            {
                visited[edge] = 1;
                que.add(edge);
            }
        }
    }
}

