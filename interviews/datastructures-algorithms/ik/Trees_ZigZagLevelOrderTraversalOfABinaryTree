/*
Zigzag Level Order Traversal Of A Binary Tree

Given a binary tree, return the zigzag level order traversal of the nodesâ€™ labels listing the odd levels from left to right and the even levels from right to left.
Example One

Input: 
          0
     1         2
  3     4  null null 
Output: [ [ 0 ],
           [ 2, 1 ],
           [ 3, 4 ] ]
               
private static class TreeNode{
    public int label;
    public TreeNode left_ptr;
    public TreeNode right_ptr;
}

Approach:
1. Do level order traversal only, but maintatin a flag and flip it at each level
2. I f flipped reverse the subList

TC: O(n) - we need to traverse all nodes in binary tree
SC: O(n) - O(n) for storing output and aux space o(n) for stroring subList
*/


public static List<List<Integer>> zigzag_level_order_traversal(TreeNode root) {
    List<List<Integer>> result = new ArrayList<>();

    // Empty tree case
    if(root == null)
        return result;

    zigzag_level_order_traversal_helper(root, result);

    return result;
}

private static void zigzag_level_order_traversal_helper(TreeNode root, List<List<Integer>> result)
{
    // 1. Basic null check fro empty tree (this is double checking as we already checked in above method)
    if(root == null)
        return;

    // 2. Iterative approach
    Queue<TreeNode> que = new LinkedList<TreeNode>();
    que.add(root);
    int qSize;
    TreeNode temp;
    List<Integer> subList;
    boolean flip = false;

    while(!que.isEmpty())
    {
        qSize = que.size();
        subList = new ArrayList<Integer>();

        for(int i=0; i<qSize; i++)
        {
            temp = que.remove();
            subList.add(temp.label);

            if(temp.left_ptr != null)
                que.add(temp.left_ptr);

            if(temp.right_ptr != null)
                que.add(temp.right_ptr);
        }

        // Reverse the order
        if(flip)
        {
            /**
            List<Integer> tempSubList = new ArrayList<>();
            for(int i=subList.size()-1; i>=0; i--)
            {
                tempSubList.add(subList.get(i));
            }
            **/

            Collections.reverse(subList);

            result.add(subList);
        }
        else
        {
            result.add(subList);
        }

        // Flip the flag after each level to get taht zigzag order
        flip = !flip;
    }
}

