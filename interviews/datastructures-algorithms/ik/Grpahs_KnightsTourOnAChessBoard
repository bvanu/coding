/**
Knights Tour On A Chess Board

You are given a rows * cols chessboard and a knight that moves like in normal chess. Currently knight is at starting position denoted by start_row th row and start_col th col, and want to reach at ending position denoted by end_row th row and end_col th col.  The goal is to calculate the minimum number of moves that the knight needs to take to get from starting position to ending position.

start_row, start_col, end_row and end_col are 0-indexed. 

Example
Input:
rows = 5
cols = 5
start_row = 0
start_col = 0
end_row = 4
end_col = 1
Output: 3
3 moves to reach from (0, 0) to (4, 1):
(0, 0) -> (1, 2) -> (3, 3) -> (4, 1). 

Notes
Input Parameters:
There are six arguments. First is an integer denoting rows, second is an integer denoting cols, third is an integer denoting start_row, fourth is an integer denoting start_col, fifth is an integer denoting end_row and sixth is an integer denoting end_col.
Output: Return an integer.
If it is possible to reach from starting position to ending position then return the minimum number of moves that the knight needs to take to get from starting position to ending position.
If it is not possible to reach from starting position to ending position then return -1.

Constraints:
1 <= rows * cols <= 10^5
0 <= start_row, end_row < rows
0 <= start_col, end_col < cols

Complexity Analysis:
TC: O(n) worst case need to traverse all nodes
SC: O(n) in case of flat tree as I am using bfs and chess board can be any shape
**/

     
static int[][] directions = {{-1,-2}, {1,-2}, {-2,-1},{-2,1}, {-1,2}, {1,2}, {2,-1},{2,1}};
static int find_minimum_number_of_moves(int rows, int cols, int start_row, int start_col, int end_row, int end_col) {
    // 1. Null checks
    if(start_row<0 || start_row>=rows || end_row<0 || end_row>=rows 
    || start_col<0 || start_col>=cols  || end_col<0 || end_col>=cols)
        return -1;

    // If source and destination are same
    if(start_row == end_row && start_col == end_col)
        return 0;

    // 2. Traverse the graph using bfs to find min moves for the knight to reach destination
    // bfs always gives min moves, as we go level by level
    int level = 0;
    boolean[][] visited = new boolean[rows][cols];
    Queue<List<Integer>> que = new LinkedList<>();

    // 3. Add start step of Knight into queue and mark it visited
    que.add(new ArrayList<Integer>(Arrays.asList(start_row, start_col)));
    visited[start_row][start_col] = true;

    while(!que.isEmpty())
    {
        // System.out.println("Level: " + level);
        // printQueue(que);

        int size = que.size(); // loop over all the nodes in one level, to keep track of level

        // 3.2. Loop over all the nodes at that level
        for(int i=0; i<size; i++)
        {
            // 3.2.1 Elements are popped here from the queue **** [OTHERWISE, YOU  DON'T TRAVERSE ALL ELEMENTS AT THAT LEVEL]
            List<Integer> pos = que.remove();
            int x = pos.get(0);
            int y = pos.get(1);

            for(int[] dir: directions)
            {
                int new_x = dir[0] + x;
                int new_y = dir[1] + y;

                // i. Did we found the destination? 
                if(new_x == end_row && new_y == end_col) // no need to validate for x and y here, as it is just comparision
                {
                    return level+1; 
                }

                // ii. If not, do bfs
                if(new_x>=0 && new_x<rows && new_y>=0 && new_y<cols && !visited[new_x][new_y])
                {
                    // a. Mark the node as visited, as other cells might have the same paths, so we don't go through them
                    // again and agian [AVOIDS TIME LIMIT EXCEEDED: ***]
                    visited[new_x][new_y] = true;
                    que.add(new ArrayList<Integer>(Arrays.asList(new_x, new_y)));
                }
            }
        }

        // 3.3. Increment level here, first elment is root which is at Level 0
        level++;
    }

    return -1;
}


private static void printQueue(Queue<List<Integer>> que)
{
   Iterator it = que.iterator();

   while(it.hasNext())
   {
       Object obj = it.next();
       System.out.print(obj + "\t");
   }

   System.out.println();
}

