/*
We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)

TC: O(nlogk)
SC: O(logk) - holds k elemets in heap 
*/
public class Point
{
    int x;
    int y;
    int distToOrg;
    
    public Point(int x, int y, int distToOrg)
    {
        this.x = x;
        this.y = y;
        this.distToOrg = distToOrg;
    }
}

class KClosestPointsToOrigin {
    public int[][] kClosest(int[][] points, int K) {
        if(points==null || points.length<1 || points.length<K)
            return null;
       
        
        // PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>((n1,n2) -> n1-n2);
   
        PriorityQueue<Point> maxHeap = new PriorityQueue<Point>(K,
            new Comparator<Point>(){
                public int compare(Point p1, Point p2)
                {
                    return p2.distToOrg-p1.distToOrg;
                }
                
            });
                                                            
    
        int n = points.length;
        int distToOrg;
        
        for(int i=0; i<n; i++)
        {
            distToOrg = points[i][0]*points[i][0] + points[i][1]*points[i][1];
            //System.out.println("x y dis:" + points[i][0] + " " + points[i][1] + " " + distToOrg);
            
            // ** Order of below 2 statements is important
            maxHeap.add(new Point(points[i][0], points[i][1], distToOrg));
            
            if(maxHeap.size()>K)
                maxHeap.poll();
            
            
            //for(Point p: maxHeap)
            //{
            //    System.out.println(p.x + " " + p.y );
            //}
        }
        
        int[][] res = new int[K][2];
        for(int i=0; i<K; i++)
        {
            Point p = maxHeap.poll();
            res[i][0] = p.x;
            res[i][1] = p.y;
        }
        
        return res;
    }
}
