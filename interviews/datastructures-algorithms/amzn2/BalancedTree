/**
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:
a binary tree in which the left and right subtrees of every node differ in height by no more than 1. 

Example 1:
Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7
Return true.

Example 2:
Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
Return false.
 
 
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 
 TC: O(n) - you go to each and every node in the tree
 SC: O(n) - for the recursive stack
 */
class BalancedTree {
    public boolean isBalanced(TreeNode root) {
        
        int height = findHeight(root);
        
        if(height==-1)
            return false;
        
        return true;
    }
    
    public int findHeight(TreeNode node)
    {
        if(node==null)
            return 0;
        
        int leftSubTreeHeight = findHeight(node.left);
        int rightSubTreeHeight = findHeight(node.right);
        
        if(leftSubTreeHeight==-1||rightSubTreeHeight==-1)
            return -1;
        
        if(Math.abs(leftSubTreeHeight-rightSubTreeHeight)<=1)
            return Math.max(leftSubTreeHeight, rightSubTreeHeight)+1;
        
        return -1;
    }
}
