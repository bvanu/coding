/*
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
*/

class MaximumSubarraySum {
    public int maxSubArray(int[] nums) {
        if(nums==null || nums.length<1)
            return -1;
        
        int start=0, currSum = 0;
        int maxSum = 0;
        int negMaxSum = Integer.MIN_VALUE;
        boolean hasAllNegatives = true;
        
        for(int i=0; i<nums.length; i++)
        {
            if(hasAllNegatives && nums[i]<0)
            {
                negMaxSum = Math.max(negMaxSum, nums[i]);
            }
            else
                hasAllNegatives = false;
            
            currSum += nums[i];
            
            if(currSum<0)
            {
                currSum = 0;
                start = i+1;
            }
            
            maxSum = Math.max(maxSum, currSum);
        }
        
        return hasAllNegatives? negMaxSum: maxSum;
    }
}
