/*
Amzn

You have an array of logs.  Each log is a space delimited string of words.

For each log, the first word in each log is an alphanumeric identifier.  Then, either:

Each word after the identifier will consist only of lowercase letters, or;
Each word after the identifier will consist only of digits.
We will call these two varieties of logs letter-logs and digit-logs.  It is guaranteed that each log has at least one word after its identifier.

Reorder the logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.

Return the final order of the logs.

Example 1:

Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
 
Constraints:

0 <= logs.length <= 100
3 <= logs[i].length <= 100
logs[i] is guaranteed to have an identifier, and a word after the identifier.
*/

class Solution {
    public String[] reorderLogFiles(String[] logs) {
        /** Approach 1: Comparator
        Intuition
        Given a list of elements [e_1, e_2, e_3], regardless of the content of the elements, the first way to specify the order among the elements is to define the pairwise << ("less than") relationship globally.

        Algorithm
        The above pairwise "less than" relationship is also known as comparator in Java, which is a function object that helps the sorting functions to determine the orders among a collection of elements.
        We show the definition of the comparator interface as follows:
        int compare(T o1, T o2) {
            if (o1 < o2)
                return -1;
            else if (o1 == o2)
                return 0;
            else // o1 > o2
                return 1;
        }
        As we discussed before, once we define the pairwise relationship among the elements in a collection, the total order of the collection is then fixed.

        Now, what we need to do is to define our own proper comparator according to the description of the problem. We can translate the problem into the following rules:
        1). The letter-logs should be prioritized above all digit-logs.
        2). Among the letter-logs, we should further sort them firstly based on their contents, and then on their identifiers if the contents are identical.
        3). Among the digit-logs, they should remain in the same order as they are in the collection.

        One can then go ahead and implement the comparator based on the above rules. Here is an example.
        
        Complexity Analysis

        Let NN be the number of logs in the list and MM be the maximum length of a single log.

        Time Complexity: \mathcal{O}(M \cdot N \cdot \log N)O(M⋅N⋅logN)

        First of all, the time complexity of the Arrays.sort() is \mathcal{O}(N \cdot \log N)O(N⋅logN), as stated in the API specification, which is to say that the compare() function would be invoked \mathcal{O}(N \cdot \log N)O(N⋅logN) times.

        For each invocation of the compare() function, it could take up to \mathcal{O}(M)O(M) time, since we compare the contents of the logs.

        Therefore, the overall time complexity of the algorithm is \mathcal{O}(M \cdot N \cdot \log N)O(M⋅N⋅logN).

        Space Complexity: \mathcal{O}(M \cdot \log N)O(M⋅logN)

        For each invocation of the compare() function, we would need up to \mathcal{O}(M)O(M) space to hold the parsed logs.

        In addition, since the implementation of Arrays.sort() is based on quicksort algorithm whose space complexity is \mathcal{O}(\log n)O(logn), assuming that the space for each element is \mathcal{O}(1)O(1)). Since each log could be of \mathcal{O}(M)O(M) space, we would need \mathcal{O}(M \cdot \log N)O(M⋅logN) space to hold the intermediate values for sorting.

        In total, the overall space complexity of the algorithm is \mathcal{O}(M + M \cdot \log N) = \mathcal{O}(M \cdot \log N)O(M+M⋅logN)=O(M⋅logN).
        **/
        Comparator<String> myComp = new Comparator<String>()
        {
          @Override
            public int compare(String log1, String log2)
            {
                // split each log into two parts: <identifier, content>
                String[] split1 = log1.split(" ", 2);
                String[] split2 = log2.split(" ", 2);
                
                // get if it s is a letter log or digit log fromt he content
                boolean isDigit1 = Character.isDigit(split1[1].charAt(0));
                boolean isDigit2 = Character.isDigit(split2[1].charAt(0));
                
                // case 1) both are letter logs
                if(!isDigit1 && !isDigit2)
                {
                    // first compare the content
                    int cmp = split1[1].compareTo(split2[1]);
                    if(cmp != 0)
                        return cmp;
                    
                    // logs of same content, compare their identifiers
                    return split1[0].compareTo(split2[0]);
                }
                
                // case 2) one is leter log and another is digit log
                if(!isDigit1 && isDigit2)
                    // letter logs come before digit logs
                    return -1;
                else if(isDigit1 && !isDigit2)
                    return 1;
                else
                    // case 3) both are digit logs
                    return 0;
            }
        };
        
        Arrays.sort(logs, myComp);
        return logs;
    }
}
