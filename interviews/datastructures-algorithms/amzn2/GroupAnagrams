/*
Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]

Complexity Analysis

Time Complexity: O(NK \log K)O(NKlogK), where NN is the length of strs, and KK is the maximum length of a string in strs. The outer loop has complexity O(N)O(N) as we iterate through each string. Then, we sort each string in O(K \log K)O(KlogK) time.

Space Complexity: O(NK)O(NK), the total information content stored in ans.
*/

class Solution {
    /*
    Approach 1: Categorize by Sorted String
    Intuition

    Two strings are anagrams if and only if their sorted strings are equal.

    Algorithm

    Maintain a map ans : {String -> List} where each key \text{K}K is a sorted string, and each value is the list of strings from the initial input that when sorted, are equal to \text{K}K.

    In Java, we will store the key as a string, eg. code. In Python, we will store the key as a hashable tuple, eg. ('c', 'o', 'd', 'e').
*/
    public List<List<String>> groupAnagrams(String[] strs) {
        if(strs==null || strs.length<1) return new ArrayList();
        
        Map<String, List<String>> map = new HashMap<String, List<String>>();
        
        for(String s: strs)
        {
            char[] ca = s.toCharArray();
            Arrays.sort(ca);
            String key = String.valueOf(ca);
            
            if(!map.containsKey(key))
                map.put(key, new ArrayList());
                
            map.get(key).add(s);
        }
        
        return new ArrayList(map.values());
    }
}
