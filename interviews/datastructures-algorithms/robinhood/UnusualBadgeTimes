/**
We are working on a security system for a badged-access room in our company's building.

We want to find employees who badged into our secured room unusually often. We have an unordered list of names and entry times over a single day. Access times are given as numbers up to four digits in length using 24-hour time, such as "800" or "2250".

Write a function that finds anyone who badged into the room three or more times in a one-hour period. Your function should return each of the employees who fit that criteria, plus the times that they badged in during the one-hour period. If there are multiple one-hour periods where this was true for an employee, just return the earliest one for that employee.


badge_times = [
  ["Paul",     "1355"],
  ["Jennifer", "1910"],
  ["John",      "835"],
  ["John",      "830"],
  ["Paul",     "1315"],
  ["John",     "1615"],
  ["John",     "1640"],
  ["Paul",     "1405"],
  ["John",      "855"],
  ["John",      "930"],
  ["John",      "915"],
  ["John",      "730"],
  ["John",      "940"],
  ["Jennifer", "1335"],
  ["Jennifer",  "730"],
  ["John",     "1630"],
  ["Jennifer",    "5"]
]


Expected output (in any order)
  John:  830  835  855  915  930
  Paul: 1315 1355 1405
https://karatstudio.karat.io/interview/b65e04c3-5b18-417e-a9a6-b3693173cbd8/candidate

TC: closer to O(N^2)
SC: O(N) for the map

*/

import java.io.*;
import java.util.*;

public class Solution {
  public static void main(String[] argv) {
    String[][] badgeTimes = new String[][] {
      {"Paul",     "1355"},
      {"Jennifer", "1910"},
      {"John",      "835"},
      {"John",      "830"},
      {"Paul",     "1315"},
      {"John",     "1615"},
      {"John",     "1640"},
      {"Paul",     "1405"},
      {"John",      "855"},
      {"John",      "930"},
      {"John",      "915"},
      {"John",      "730"},
      {"John",      "940"},
      {"Jennifer", "1335"},
      {"Jennifer",  "730"},
      {"John",     "1630"},
      {"Jennifer",    "5"},
    };
    
    Solution obj = new Solution();
    Map<String, List<Integer>> res = obj.findUnusualBadgedUsers(badgeTimes);
    
    for(String key: res.keySet()) {
      System.out.println(res.get(key).toString());
    }

  }
  
  public Map<String, List<Integer>> findUnusualBadgedUsers(String[][] badgeTimes) {
    if(badgeTimes == null) {
      return null;
    }
    
    // 1. Build a map of uses with sorted times
    Map<String, List<Integer>> badgeMap = new HashMap<String, List<Integer>>();
    for(String[] badgeTime: badgeTimes) {
      int time = Integer.parseInt(badgeTime[1]);
      List<Integer> temp;
      if(badgeMap.containsKey(badgeTime[0]))
      {
        temp = badgeMap.get(badgeTime[0]);
      }
      else
      {
        temp = new ArrayList<>();
      }
      
      temp.add(time);
      
      badgeMap.put(badgeTime[0], temp);
    }
    
    // 2. Sort the badgeTimes of each user
    Map<String, List<Integer>> res = new HashMap<>();
    
    for(String key: badgeMap.keySet()) {
      List<Integer> tempList = badgeMap.get(key);
      Collections.sort(tempList);
      badgeMap.put(key, tempList);
      
      List<Integer> unusalList = getUnsualBadgeTime(tempList);
      if(unusalList != null) {
        res.put(key, unusalList);
      }
    }
    
    return res;
  }
  
  private List<Integer> getUnsualBadgeTime(List<Integer> times) {
    List<Integer> res;
    
    for(int i=0 ; i<times.size(); i++) {
      int start = times.get(i);
      int end = start + 100;
      int count = 0;
      int j = i;
      res = new ArrayList<>();
      
      for(j=i; j<times.size(); j++) {
        if(times.get(j)<=end) {
          res.add(times.get(j));
          count++;
        } else {
          break;
        }
      }
      
      if(count >=3) {
        return res;
      } 
    }
    
    return null;
  }
}
