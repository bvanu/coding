class Solution {
    
    /** Approach #1: Brute force:
    Intuition

    Do as directed in question. For each element in the array, we find the maximum level of water it can trap after the rain, which is equal to the minimum of maximum height of bars on both the sides minus its own height.

    Algorithm

    Initialize ans=0ans=0
    Iterate the array from left to right:
        Initialize left_max=0 and right_max=0
        Iterate from the current element to the beginning of array updating:
            left_max=max(left_max,height[j])
        Iterate from the current element to the end of array updating:
            right_max=max(right_max,height[j])
        Add min(left_max,right_max)âˆ’height[i] to ans

    Complexity Analysis

    Time complexity: O(n^2). For each element of array, we iterate the left and right parts.
    Space complexity: O(1) extra space.
    **/
    public int trap(int[] height) {
        int trappedWater = 0;
        int left_max = 0, right_max = 0;
        int n = height.length;
        
        // for i=0 and i=n, no water will be trapped
        for(int i=1; i<n-1; i++)
        {      
            left_max = height[i];
            right_max = height[i];
            
            // find left_max
            for(int j=0; j<i; j++)
            {
                left_max = Math.max(left_max, height[j]);
            }
            
            // find right_max
            for(int j=i+1; j<n; j++)
            {
                right_max = Math.max(right_max, height[j]);
            }
            
            trappedWater += Math.min(left_max, right_max)-height[i];
        }
        
        return trappedWater;
    }
    
    
    /** Approach#2: DP
    Intuition

    In brute force, we iterate over the left and right parts again and again just to find the highest bar size upto that index. But, this could be stored. Voila, dynamic programming.

    Algorithm
    Find maximum height of bar from the left end upto an index i in the array \text{left\_max}left_max.
    Find maximum height of bar from the right end upto an index i in the array \text{right\_max}right_max.
    Iterate over the \text{height}height array and update ans:
    Add min(left_max[i], right_max[i]) - height[i]
    
    Complexity analysis

    Time complexity: O(n). We store the maximum heights upto a point using 2 iterations of O(n) each.
    We finally update ans using the stored values in O(n).
    
    Space complexity: O(n)O(n) extra space.
    Additional O(n) space for left_max and right_max arrays than in Approach 1.
    **/
    public int trap_dp(int[] height) {
        int n = height.length;
        int[] left_max_height = new int[n];
        int[] right_max_height = new int[n];
        int trappedWater = 0;
        
        // Get left_max heights at i, which is max of max_height so far and itself
        left_max_height[0] = height[0];
        for(int i=1; i<n; i++)
        {
            left_max_height[i] = Math.max(height[i], left_max_height[i-1]);
        }
        
        // Get right max heights at i
        right_max_height[n-1] = height[n-1];
        for(int i=n-2; i>=0; i--)
        {
            right_max_height[i] = Math.max(height[i], right_max_height[i+1]);
        }
        
        // Compute trapped water
        for(int i=1; i<n-1; i++)
        {
            trappedWater += Math.min(left_max_height[i], right_max_height[i]) - height[i];
        }
        
        return trappedWater;        
    }
    
}
