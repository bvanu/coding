class Solution {
    
    /** Approach #1: Brute force:
    Intuition

    Do as directed in question. For each element in the array, we find the maximum level of water it can trap after the rain, which is equal to the minimum of maximum height of bars on both the sides minus its own height.

    Algorithm

    Initialize ans=0ans=0
    Iterate the array from left to right:
        Initialize left_max=0 and right_max=0
        Iterate from the current element to the beginning of array updating:
            left_max=max(left_max,height[j])
        Iterate from the current element to the end of array updating:
            right_max=max(right_max,height[j])
        Add min(left_max,right_max)−height[i] to ans

    Complexity Analysis

    Time complexity: O(n^2). For each element of array, we iterate the left and right parts.
    Space complexity: O(1) extra space.
    **/
    public int trap_bf(int[] height) {
        int trappedWater = 0;
        int left_max = 0, right_max = 0;
        int n = height.length;
        
        // for i=0 and i=n, no water will be trapped
        for(int i=1; i<n-1; i++)
        {      
            left_max = height[i];
            right_max = height[i];
            
            // find left_max
            for(int j=0; j<i; j++)
            {
                left_max = Math.max(left_max, height[j]);
            }
            
            // find right_max
            for(int j=i+1; j<n; j++)
            {
                right_max = Math.max(right_max, height[j]);
            }
            
            trappedWater += Math.min(left_max, right_max)-height[i];
        }
        
        return trappedWater;
    }
    
    
    /** Approach#2: DP two pass
    Intuition

    In brute force, we iterate over the left and right parts again and again just to find the highest bar size upto that index. But, this could be stored. Voila, dynamic programming.

    Algorithm
    Find maximum height of bar from the left end upto an index i in the array \text{left\_max}left_max.
    Find maximum height of bar from the right end upto an index i in the array \text{right\_max}right_max.
    Iterate over the \text{height}height array and update ans:
    Add min(left_max[i], right_max[i]) - height[i]
    
    Complexity analysis

    Time complexity: O(n). We store the maximum heights upto a point using 2 iterations of O(n) each.
    We finally update ans using the stored values in O(n).
    
    Space complexity: O(n)O(n) extra space.
    Additional O(n) space for left_max and right_max arrays than in Approach 1.
    **/
    public int trap_dp(int[] height) {
        int n = height.length;
        int[] left_max_height = new int[n];
        int[] right_max_height = new int[n];
        int trappedWater = 0;
        
        // Get left_max heights at i, which is max of max_height so far and itself
        left_max_height[0] = height[0];
        for(int i=1; i<n; i++)
        {
            left_max_height[i] = Math.max(height[i], left_max_height[i-1]);
        }
        
        // Get right max heights at i
        right_max_height[n-1] = height[n-1];
        for(int i=n-2; i>=0; i--)
        {
            right_max_height[i] = Math.max(height[i], right_max_height[i+1]);
        }
        
        // Compute trapped water
        for(int i=1; i<n-1; i++)
        {
            trappedWater += Math.min(left_max_height[i], right_max_height[i]) - height[i];
        }
        
        return trappedWater;        
    }
    
    
    /** Approach #4: DP single pass
    Intuition

    As in Approach 2, instead of computing the left and right parts seperately, we may think of some way to do it in one iteration. From the figure in dynamic programming approach, notice that as long as right_max[i]>left_max[i] (from element 0 to 6), the water trapped depends upon the left_max, and similar is the case when left_max[i]>right_max[i] (from element 8 to 11). So, we can say that if there is a larger bar at one end (say right), we are assured that the water trapped would be dependant on height of bar in current direction (from left to right). As soon as we find the bar at other end (right) is smaller, we start iterating in opposite direction (from right to left). We must maintain left_max and right_max during the iteration, but now we can do it in one iteration using 2 pointers, switching between the two.

    Algorithm

    Initialize \text{left}left pointer to 0 and \text{right}right pointer to size-1
    While left<right, do:
        If height[left] is smaller than height[right]
            If \text{height[left]} \geq \text{left\_max}height[left]≥left_max, update \text{left\_max}left_max
            Else add \text{left\_max}-\text{height[left]}left_max−height[left] to \text{ans}ans
             Add 1 to \text{left}left.
        Else
                If \text{height[right]} \geq \text{right\_max}height[right]≥right_max, update \text{right\_max}right_max
                Else add \text{right\_max}-\text{height[right]}right_max−height[right] to \text{ans}ans
                Subtract 1 from \text{right}right.

    Complexity analysis

    Time complexity: O(n). Single iteration of O(n).
    Space complexity: O(1) extra space. Only constant space required for left, right, left_max and right_max.
    **/
    public int trap(int[] height)
    {
        int n = height.length;
        int left_max = 0, right_max = 0;
        int left = 0, right = n-1;
        int trappedCount = 0;
        
        while(left<right)
        {
            // Update left
            if(height[left]<height[right])
            {
               if( height[left] >= left_max)
               {    
                   left_max = height[left];
               } else
               {
                    trappedCount += left_max-height[left];
               }
                
                left++;
            } 
            // Update right
            else
            {
                if(height[right] >= right_max){
                    right_max = height[right];
                } else{
                    trappedCount += right_max-height[right];
                }
                
                right--;
            }
        }
        
        return trappedCount;
    }
    
}
