class Solution {
    /** Approach 2: Iterative Binary Search
    Complexity Analysis

    Time complexity : O(log2(n)). We reduce the search space in half at every step. Thus, the total search space will be consumed in log_2(n) steps. Here, nn refers to the size of numsnums array.

    Space complexity : O(1)O(1). Constant extra space is used.
    **/
    public int findPeakElement(int[] nums) {
        int n = nums.length;
        int l = 0, r = n-1, mid;
        
        while(l<r)
        {
            mid = l + (r-l)/2;
            
            // If on dsc slope, search on left
            if(nums[mid] > nums[mid+1])
                r = mid;
            else
                l = mid+1;
        }
        
        return l;        
    }
    
    /** Approach 1: Linear Scan
    In this approach, we make use of the fact that two consecutive numbers nums[j]nums[j] and nums[j + 1]nums[j+1] are never equal. Thus, we can traverse over the numsnums array starting from the beginning. Whenever, we find a number nums[i]nums[i], we only need to check if it is larger than the next number nums[i+1]nums[i+1] for determining if nums[i]nums[i] is the peak element. The reasoning behind this can be understood by taking the following three cases which cover every case into which any problem can be divided.

    Case 1. All the numbers appear in a descending order. In this case, the first element corresponds to the peak element. We start off by checking if the current element is larger than the next one. The first element satisfies this criteria, and is hence identified as the peak correctly. In this case, we didn't reach a point where we needed to compare nums[i]nums[i] with nums[i-1]nums[i−1] also, to determine if it is the peak element or not.

    Case 2. All the elements appear in ascending order. In this case, we keep on comparing nums[i]nums[i] with nums[i+1]nums[i+1] to determine if nums[i]nums[i] is the peak element or not. None of the elements satisfy this criteria, indicating that we are currently on a rising slope and not on a peak. Thus, at the end, we need to return the last element as the peak element, which turns out to be correct. In this case also, we need not compare nums[i]nums[i] with nums[i-1]nums[i−1], since being on the rising slope is a sufficient condition to ensure that nums[i]nums[i] isn't the peak element.


    Case 3. The peak appears somewhere in the middle. In this case, when we are traversing on the rising edge, as in Case 2, none of the elements will satisfy nums[i] > nums[i + 1]nums[i]>nums[i+1]. We need not compare nums[i]nums[i] with nums[i-1]nums[i−1] on the rising slope as discussed above. When we finally reach the peak element, the condition nums[i] > nums[i + 1]nums[i]>nums[i+1] is satisfied. We again, need not compare nums[i]nums[i] with nums[i-1]nums[i−1]. This is because, we could reach nums[i]nums[i] as the current element only when the check nums[i] > nums[i + 1]nums[i]>nums[i+1] failed for the previous((i-1)^{th}(i−1) 
    th
      element, indicating that nums[i-1] < nums[i]nums[i−1]<nums[i]. Thus, we are able to identify the peak element correctly in this case as well.

    Complexity Analysis
    Time complexity : O(n)O(n). We traverse the numsnums array of size nn once only.
    Space complexity : O(1)O(1). Constant extra space is used.
**/
    public int findPeakElement_1(int[] nums) {
        int n = nums.length;
        
        for(int i=0; i<n-1; i++) {
            if(nums[i] > nums[i+1])
                return i;
        }
        
        return n-1;
    }
    
    public int findPeakElement_bruteforce(int[] nums) {
        int n = nums.length;
        
        if(n==0) return 0;
        if(n==1) return 0;
        
        for(int i=0; i<nums.length; i++)
        {
            if( i==0 && n >= 1) 
            {
                if(nums[i] > nums[i+1])
                    return i;
                else
                    continue;
            }
            
            if(i==n-1 && n >= 1)
            {
                if( nums[i] > nums[i-1])
                    return i;
                else
                    continue;
            }
            
            if(nums[i-1] < nums[i] && nums[i] > nums[i+1])
            {
                return i;
            }
        }
        
        return -1;
    }
}
