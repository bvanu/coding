/*
 * Click `Run` to execute the snippet below!
 */

// import java.io.*;
// import java.util.*;

// /*
//  * To execute Java, please define "static void main" on a class
//  * named Solution.
//  *
//  * If you need more classes, simply define them inline.
//  */

// class Solution {
//   public static void main(String[] args) {
//     ArrayList<String> strings = new ArrayList<String>();
//     strings.add("Hello, World!");
//     strings.add("Welcome to CoderPad.");
//     strings.add("This pad is running Java " + Runtime.version().feature());

//     for (String string : strings) {
//       System.out.println(string);
//     }
//   }
  
//   int[][] directions =  {{1,0}, {0,1}, {-1,0}, {0,-1}};
  
//   public int getMinElapseTime(List<List<Integer>> grid)
//   {
//     // 1. Null checks
//     if(grid == null || grid.size() <1) return 0;
    
//     // 2. Do bfs and update the orange state
//     int timeElasped = 1;
//     int m = grid.size();
//     int n = grid.get(0).size();
//     List<List<Integer>> new_grid = new ArrayList<>(grid);
//     int count_rotten = 1, int  K = 7
//     int i=0, j=0;
    
//     while(i< m && j<n && count_rotten!=K)
//     {
//       for( i=0; i<m; i++)
//       {
//         for(j=0; j<n; j++)
//         {
//           if(grid.get(i).get(j) == 2)
//           {
//             getState(i, j, grid, new_grid);
//           }
//         }
//       } 
      
//       if(count_rotten ==K) return timeElapsed;
//       grid = new ArrayList<>(new_grid);
//       timeElapsed++;
      
//     }
     
//     return (count_rotten==K) ? timeElapsed: -1;
//   }
  
//   private void getState(int x, int y, List<List<Integer>> grid, List<List<Integer>> new_grid)
//   {
//      for(int[] dir: directions)
//      {
//        int new_x = x + dir[0];
//        int new_y = y + dir[1];
       
//        if(new_x>=0 && new_x<grid.size() && new_y>=0 && new_y<grid.get(0).size() 
//           && grid.get(new_x).get(new_y) == 1)
//        {
//          new_grid.get(new_x).set(new_y, 2);
//        }
//      }
//   }
// }
// Grid # Minutes        1            2            3           4        
// #  2 1 1        2 2 1        2 2 2        2 2 2        2 2 2
// #  1 1 0 ->     2 1 0 ->     2 2 0  ->    2 2 0 ->     2 2 0
// #  0 1 1        0 1 1        0 1 1        0 2 1        0 2 2

// new_grid
//   2 2 1
//   2 1 0
//   0 1 1
  
//   [2 0 1]
/* 
Your previous Python 3 content is preserved below:

# You are given an m x n grid where each cell can have one of three values:

# 0 representing an empty cell,
# 1 representing a fresh orange, or
# 2 representing a rotten orange.
# Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

# Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

# Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
# Output: 4

# Minutes        1            2            3           4        
#  2 1 1        2 2 1        2 2 2        2 2 2        2 2 2
#  1 1 0 ->     2 1 0 ->     2 2 0  ->    2 2 0 ->     2 2 0
#  0 1 1        0 1 1        0 1 1        0 2 1        0 2 2

2 2 1

1 1
1 2 0
*/
