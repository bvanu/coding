import java.io.*;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.*;

import com.fasterxml.jackson.databind.ObjectMapper;
//import sun.misc.Queue;
import com.fasterxml.jackson.core.JsonProcessingException;

/*

California
-Bay Area
--San Francisco County
---San Francisco
----Nextdoor NOPA
-----Brenda's Meat & Three
--Oakland
New York City
-Brooklyn
--Alligator Lounge
-Queens

Input:

[{
  id: number,
  parentId: number || None,
  name: string,
}, ...]

where
  `name` is the name of a place
  `id` is a number unique to the list
  `parentId` is one of the `id`s indicating that this place lies within the geographical boundaries of the parent

TC: O(n)
SC: O(heightOfTree)
*/

// Main class should be named 'Solution'
class Solution {
    class Node{
        int id;
        int parent_id;  //number || None (-1),
        String name;
        
        public Node(int id, int parent_id, String name) 
        {
            this.id = id;
            this.parent_id = parent_id;
            this.name = name;
        }
    }
    
        
    
    public static void main(String[] args) {
        System.out.println("Hello, World");
        
        Solution sol = new Solution();
        sol.printGeogrpahicalLocations();
    }
    
    public void printGeogrpahicalLocations()
    {
        Node n1 = new Node(1, -1, "California");
        Node n2 = new Node(2, 1, "Bay Area");
        Node n3 = new Node(4, 2, "San Francisco County");
        Node n4 = new Node(5, 4, "San Francisco");
        Node n5 = new Node(3, 2, "Oakland");
        Node n6 = new Node(6, 5, "Nextdoor NOPA");
        Node n7 = new Node(7, 6, "Brenda's Meat & Three");
        Node n8 = new Node(8, -1, "New York City");   
        Node n9 = new Node(9, 8, "Brooklyn");
        Node n10 = new Node(11, 9, "Alligator Lounge");
        Node n11 = new Node(10, 8, "Queens");
        List<Node> geoLocations = new ArrayList<Node>(Arrays.asList(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11));
        
        System.out.println("Geoloc size: " + geoLocations.size());
        printGeogrpahicalLocations(geoLocations);
    }
    
    public void printGeogrpahicalLocations(List<Node> geoLocations)
    {
        // 1. Null checks
        if(geoLocations == null || geoLocations.size() <1)
            return;
            
        // 2. Create map of parent to child relations        
        Map<Integer, List<Node>> map = new HashMap<>();
        for(Node loc: geoLocations)
        {
            int pId = loc.parent_id;
            List<Node> list = map.getOrDefault(pId, new ArrayList<Node>());
            list.add(loc);
            
            map.put(pId, list);
        }
        // printMap(map);
        
        // 3. Iterate over map with key as -1, which are root's of different trees
        for(Node loc: map.get(-1))
        {
            List<Character> prefix = new ArrayList<Character>();
            dfs(loc, prefix, map);
        }
    }
    
    private void dfs(Node node, List<Character> prefix, Map<Integer, List<Node>> map)
    {
        // Print to console
        String output = "";
        for(char c: prefix)
        {
            output += c;
        }
        System.out.println(output + node.name);
        
        // 1. Base case - if node has no children, that is  a leaf node
        if(!map.containsKey(node.id))
        {
            return;
        }
        
        // 2. Recursive case
        for(Node child: map.get(node.id))
        {
            // 2.1. Sandwich pattern
            prefix.add('-');
            dfs(child, prefix, map);
            prefix.remove(prefix.size()-1);
        }  
    }
    
    private void printMap(Map<Integer, List<Node>> map)
    {
        for(int key: map.keySet())
        {
            System.out.print(key + " : \t");
            for(Node n: map.get(key))
            {
                System.out.print(n.id + "\t");
            }
            
            System.out.println();
        }
    }
    
}
