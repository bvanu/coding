/**
Compare 2 N-Ary Trees

TC: O(n) - need to check all the nodes 
SC: O(heightOfTheTree) - for the recursive stack
**/

class TreeNode {
	int val;
	List<TreeNode> children;
	
	public TreeNode(int val) {
		this.val = val;
		this.children = new ArrayList<>();
	}
}

class Solution {

	public boolean isSameTree(TreeNode p, TreeNode q) {
		// 1. Base case
		if(p == null && q== null) return true;
		if(p==null || q==null || p.val!=q.val || p.children.size()!=q.children.size()) return false;
		
		// 2. Recursive case
		for(int i=0; i<p.children.size(); i++) {
			boolean isSubTreeSame = isSameTree(p.children.get(i), q.children.get(i));
			
			// Backtracking
			if(!isSubTreeSame) {
				return false;
			}
		}
		
		return true;
	}
}
