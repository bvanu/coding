/**
Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:
board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.

Approach:
1. For each cell, we need to check if its row HashSet, if its col HashSet and its grid HashSet do not have duplicate values.
2. Create n row, col and grid HashSets.
3. Iterate over the matrix, and check if any of the row, col or grid HashSet contains duplicates. If yes, return false and if false add that value to the HashSet.
4. Way to caclulate grid number is (i/3)*3+(j/3).

Complexity analysis:
TC: O(n^2)
SC: O(3*n^2) - one for each of the row, col and grid HashSets, but these HashSets are sparse.

**/
class Solution {
    public boolean isValidSudoku(char[][] board) {
        if(board == null || board.length <1)
            return false;
        
        int n = board.length;
        
        // 1. Create HashSet 9 rows, 9 cols, 9 grids (as n=9)
        List<Set<Character>> rows = new ArrayList<Set<Character>>();
        List<Set<Character>> cols = new ArrayList<Set<Character>>();
        List<Set<Character>> grid = new ArrayList<Set<Character>>();
        for(int i=0; i<n; i++)
        {
            rows.add(new HashSet<Character>());
            cols.add(new HashSet<Character>());
            grid.add(new HashSet<Character>());
        }
        
        // 2. Iterate over Sudoku grid and check if it is valid
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(board[i][j] == '.')
                    continue;
                
                if(rows.get(i%n).contains(board[i][j]))
                    return false;
                
                rows.get(i%n).add(board[i][j]);
                
                if(cols.get(j%n).contains(board[i][j]))
                    return false;
                
                cols.get(j%n).add(board[i][j]);

                int gridIndex = (i/3)*3 + (j/3); // CALCULATING GRID NuMBER
                if(grid.get(gridIndex).contains(board[i][j]))
                    return false;
                
                grid.get(gridIndex).add(board[i][j]);
            }
        }
        
        return true;
    }
}
