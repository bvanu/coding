/**
We are given two strings, A and B.
A shift on A consists of taking string A and moving the leftmost character to the rightmost position. For example, if A = 'abcde', then it will be 'bcdea' after one shift on A. 
Return True if and only if A can become B after some number of shifts on A.

Time Complexity: O(N^2), where N is the length of A. For each rotation s, we check up to N elements in A and B.
Space Complexity: O(1). We only use pointers to elements of A and B.
**/
class Solution {
    public boolean rotateString(String A, String B) {
        if(A==null || B==null)
            return false;
        
        if(A.length()!=B.length())
            return false;
        
        if(A.length()==0)
            return true;
        
        for(int i=0; i<A.length(); i++)
        {
            if(rotateString(A, B, i))
                return true;
        }
        
        return false;
    }
    
    private boolean rotateString(String A, String B, int rotation)
    {
        for(int i=0; i<A.length(); i++)
        {
            if(A.charAt(i)!=B.charAt((rotation+i)%B.length()))
               return false;
        }
        
        return true;
    }
}
