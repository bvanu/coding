// Tip: ArrayList<LinledList<PAir<Key,Value>>

class Pair<U,V>
{
    public U first;
    public V second;
    
    public Pair(U first, V second)
    {
        this.first = first;
        this.second = second;
    }
}

class Bucket
{
    private List<Pair<Integer,Integer>> bucket;
    
    public Bucket()
    {
        this.bucket = new LinkedList<Pair<Integer,Integer>>();
    }
    
    public void update(Integer key, Integer value)
    {
        for(Pair<Integer,Integer> pair: this.bucket)
        {
            if(pair.first.equals(key))
            {
                pair.second = value;
                return;
            }
        }   
        
        this.bucket.add(new Pair<Integer,Integer>(key, value));
        return;
    }
    
    public Integer get(Integer key)
    {
        for(Pair<Integer,Integer> pair: this.bucket)
        {
            if(pair.first.equals(key))
                return pair.second;
        }
        
        return -1;
    }
    
    public void remove(Integer key)
    {
         for(Pair<Integer,Integer> pair: this.bucket)
        {
            if(pair.first.equals(key))
            {
                this.bucket.remove(pair);
                break; // if break is not added, you get ConcurrentModificationException
            }
        }
    }
}

class MyHashMap {
    int key_space;
    List<Bucket> hash_map;
    
    /** Initialize your data structure here. */
    public MyHashMap() {
        this.key_space = 2069;
        this.hash_map = new ArrayList<Bucket>();
        
        for(int i=0; i<key_space; i++)
            this.hash_map.add(new Bucket());
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        this.hash_map.get(key%key_space).update(key, value);
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        return this.hash_map.get(key%key_space).get(key);
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        this.hash_map.get(key%key_space).remove(key);   
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
