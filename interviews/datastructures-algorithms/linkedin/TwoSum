/**
LinkedIn

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order. 

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].

Complexity Analysis:
Time complexity : O(n). We traverse the list containing nn elements exactly twice. Since the hash table reduces the look up time to O(1), the time complexity is O(n).
Space complexity : O(n). The extra space required depends on the number of items stored in the hash table, which stores exactly nn elements.

**/

class Solution {
    /**Approach: Two-pass Hash Table **/
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        int idx = 0;
        int[] indices = new int[2];
        
        for(int num: nums)
            map.put(num, idx++);
        
        
        for(int i=0;i<nums.length; i++)
        {
            int key = target-nums[i];
            
            if(map.containsKey(key))
            {
                if(map.get(key)!=i)
                {
                    indices[0] = i;
                    indices[1] = map.get(key);
                    
                    return indices;
                }
            }
        }
        
        return indices;
    }
}
