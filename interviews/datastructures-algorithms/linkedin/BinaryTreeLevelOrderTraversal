/**
 * Linkedin
 *
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    /* Approach #1: BFS using queue
    
    TC: O(nk)
    SC: O(n)
    **/
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null) return new ArrayList<List<Integer>>();
        
        int queSize;
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        Queue<TreeNode> que = new LinkedList<TreeNode>();
        List<Integer> sublist;
        TreeNode node;
        
        que.add(root);
        
        while(!que.isEmpty())
        {
            queSize = que.size();
            sublist = new ArrayList<Integer>();
            
            for(int i=0; i<queSize; i++)
            {
                node = que.poll();
                
                sublist.add(node.val);
                
                if(node.left != null) que.add(node.left);
                if(node.right != null) que.add(node.right);
            }
            
            list.add(sublist);
        }
        
        return list;
    }
}
