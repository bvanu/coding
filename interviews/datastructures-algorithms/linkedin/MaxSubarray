/**
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
**/
class Solution {
    
    /**
    Approach1: Greedy
    
    Complexity Analysis
    Time complexity : \mathcal{O}(N)O(N) since it's one pass along the array.
    Space complexity : \mathcal{O}(1)O(1), since it's a constant space solution.
    **/
    public int maxSubArray(int[] nums) {
        if(nums==null || nums.length<1) return 0;
        
        int currSum = nums[0];
        int maxSum = nums[0];
        
        for(int i=1; i<nums.length; i++)
        {
            currSum = Math.max(nums[i], currSum+nums[i]);
            maxSum = Math.max(currSum, maxSum);
        }
        
        return maxSum;
    }
    
    /** Greedy appraoch, helps to find the indices**/
    public int maxSubArray2(int[] nums) {
        if(nums==null || nums.length<1)
            return 0;
        
        int maxSum = 0;
        int maxNegativeSum = Integer.MIN_VALUE;
        int currSum = 0;
        int start =0;
        boolean areAllNegatives = true;
        
        for(int num: nums)
        {
            if(areAllNegatives)
            {
                if(num<0)
                    maxNegativeSum = Math.max(num, maxNegativeSum);
                else
                    areAllNegatives = false;
            }
            
            currSum += num;
            
            if(currSum<0)
            {
                currSum = 0;
                //start = i+1; // use end as well to find the subarray indices
            }
            
            maxSum = Math.max(currSum, maxSum);
        }
        
        return areAllNegatives?maxNegativeSum:maxSum;
    }
}
