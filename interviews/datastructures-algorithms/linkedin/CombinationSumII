/*
Linkedin

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 
Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30
*/
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target)
    {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        Arrays.sort(candidates);
        backtrack(candidates, new ArrayList<Integer>(), list, target, 0);
        return list;
    }
    
    private void backtrack(int[] nums, List<Integer> tempList, List<List<Integer>> list, int remain, int start)
    {
        if(remain < 0) return;
        if(remain == 0) list.add(new ArrayList<>(tempList));
        
        for(int i=start; i<nums.length; i++)
        {
            // skip duplicates
            if(i>start && nums[i] == nums[i-1]) continue;
            
            tempList.add(nums[i]);
            backtrack(nums, tempList, list, remain-nums[i], i+1); // not i + 1 because we can reuse same elements
            tempList.remove(tempList.size()-1);
        }
    }
}
