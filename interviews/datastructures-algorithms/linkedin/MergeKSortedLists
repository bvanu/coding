/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 *
 * TC: O(nlogk)
 * SC: O(n)
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null || lists.length<1)
            return null;
        
        return mergeLists(lists, 0, lists.length-1); 
    }
    
    public ListNode mergeLists(ListNode[] lists, int start, int end)
    {
        if(start<end)
        {
            int mid = (start+end)/2;
            
            return merge(mergeLists(lists, start, mid), 
                         mergeLists(lists, mid+1, end));
            
        }
        
        return lists[start];
    }
    
    public ListNode merge(ListNode l1, ListNode l2)
    {
        ListNode dummyHead = new ListNode(0);
        ListNode curr = dummyHead;
        
        while(l1!=null && l2!=null)
        {
            if(l1.val<l2.val)
            {
                curr.next = l1;
                l1 = l1.next;
            }
            else
            {
                curr.next = l2;
                l2 = l2.next;
            }
            
            curr = curr.next;
        }
        
        if(l1!=null)
                curr.next = l1;

        if(l2!=null)
          curr.next = l2;
    
        return dummyHead.next;
    }
}
