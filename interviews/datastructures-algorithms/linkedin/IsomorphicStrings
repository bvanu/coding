/**
Linkedin

Given two strings s and t, determine if they are isomorphic.

Two strings are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
**/
class Solution {
    /*
    Approach #1: Using HashMaps
    TC: O(n)
    SC: O(n)
    */
    public boolean isIsomorphic1(String s, String t) {
        if(s==null || t==null || s.length()!=t.length()) return false;
        
        Map<Character, Character> map = new HashMap<Character, Character>();
        
        for(int i=0; i<s.length(); i++)
        {
            char key = s.charAt(i);
            char val = t.charAt(i);
            
            if(!map.containsKey(key))
            {
                // if map doesn't contain that key, the corresponding value should also be not present in the map
                // because one key should map to one val
                if(map.containsValue(val))
                  return false;
                
                map.put(key, val);
            }
            
            if(map.containsKey(key) && map.get(key)!=val)
                return false;
        }
        
        return true;
    }
    
    /*
    Approach #2: Using constant space
    Since all the test cases use ASCII characters, you can use small arrays as a lookup tables.
    
    TC: O(n)
    SC: O(1)
    */
    
    public boolean isIsomorphic(String s, String t) {
        if(s==null || t==null || s.length()!=t.length()) return false;
        
        char[] sm = new char[256];
        char[] tm = new char[256];
        
        for(int i=0; i<s.length(); i++)
        {
            char sc = s.charAt(i);
            char tc = t.charAt(i);
            
            if(sm[sc]==0 && tm[tc]==0)
            {
                sm[sc] = tc;
                tm[tc] = sc;
            }
            else if(sm[sc]!=tc || tm[tc]!=sc)
                return false;
        }
        
        return true;
        
    }
}
