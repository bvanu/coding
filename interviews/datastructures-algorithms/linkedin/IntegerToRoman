/*
Linkedin

Overview
In a lot of countries, Roman Numerals are taught in elementary school-level math. This has made them a somewhat popular "easy" interview question. Unfortunately though, this ignores the fact that not everybody learned them in school, and therefore a big advantage has been given to those who did. I suspect it's also difficult for a lot of us who have learned them previously to fully appreciate how much easier prior experience makes this question. While this is very unfair, and possibly very frustrating, keep in mind that the best thing you can do is work through this question and the related question Roman to Integer so that you don't get caught out by it in a real interview. In short, if you're here reading this, you've saved yourself from getting caught out by it! Thankfully, questions that rely on this kind of prior knowledge are few and far between.

Have a go at Roman to Integer first

The problem of converting a Roman Numeral to an Integer is simpler. Therefore, we suggest that you have a go at it first if you're finding this question difficult. This will allow you to become more familiar with the concept of Roman Numerals without the "ambiguity" issue that comes up in converting an integer to a Roman Numeral. When converting a Roman Numeral to an integer, there's only one sensible conversion.

Roman Numeral Symbols

Roman Numerals are made with 7 single-letter symbols, each with its own value. Additionally, the subtractive rules (as explained in the problem description) give an additional 6 symbols. This gives us a total of 13 unique symbols (each symbol is made of either 1 letter or 2).

Symbol mapping

An integer is represented as a Roman Numeral by finding symbols that add to its value.

Handling Ambiguity

One thing that can be a bit confusing if you're not familiar with Roman Numerals is knowing which representation is the "correct" one for a particular integer. For example, consider these possible ways of representing 140. Which of these is correct?

Some of the possible ways of representing 140 with Roman Numerals.

The system we use to decide is to select the representation with the largest possible symbols, working from left to right. For example, the representations above with the largest symbol at the start are the ones starting with C.

All ways of representing 140 that start with a C.

To decide which of these to go with, we look at the next symbol. Two of them have an X, which is worth 10, and one of them has an XL, which is worth 40. Because the XL is worth more, we go with that representation. Therefore, the representation for 140 is CXL.

This definition of Roman Numerals is, these days, the "most accepted". Interestingly, it still isn't an absolute standard, and throughout history, there have been many variants. If you're interested in math and history, we recommend checking out the Wikipedia article for your own interest.
*/

class Solution {
    /*
    Approach 1: Greedy
    Intuition

    Representing a given integer as a Roman Numeral requires finding a sequence of the above 13 symbols, where their corresponding values add up to the integer. This sequence must be in order from largest to smallest, based on symbol value. To remind you, these are the symbol values.

    Symbol mapping

    As explained in the overview, the representation should use the largest possible symbols, working from the left. Therefore, it makes sense to use a Greedy algorithm. A Greedy algorithm is an algorithm that makes the best possible decision at the current time; in this case taking out the largest possible symbol it can.

    So to represent a given integer, we look for the largest symbol that fits into it. We subtract that, and then look for the largest symbol that fits into the remainder, and so on until the remainder is 0. Each of the symbols we take out are appended onto the output Roman Numeral string.

    For example, suppose we need to make the number 671.

    The largest symbol that fits into 671 is D (which is worth 500). The next symbol up, CM, is worth 900 and so is too big to fit. Therefore, we now have the following.

    Roman Numeral so far: D
    Integer remainder: 671 - 500 = 171
    We now repeat the process with 171. The largest symbol that fits into it is C (worth 100).

    Roman Numeral so far: DC
    Integer remainder: 171 - 100 = 71
    Repeating this with 71, we find the largest symbol that fits in is L (worth 50).

    Roman Numeral so far: DCL
    Integer remainder: 71 - 50 = 21
    For 21, the largest symbol that fits in is X (worth 10).

    Roman Numeral so far: DCLX
    Integer remainder: 21 - 10 = 11
    For 11, the largest symbol that fits in is again X.

    Roman Numeral so far: DCLXX
    Integer remainder: 11 - 10 = 1
    Finally, the 1 is represented with a I and we're done.

    Roman Numeral so far: DCLXXI
    Integer remainder: 1 - 1 = 0
    In pseudocode, this algorithm is as follows.

    define function to_roman(integer):
        roman_numeral = ""
        while integer is non-zero:
            symbol = biggest valued symbol that fits into integer
            roman_numeral = concat roman_numeral and symbol
            integer = integer - value of symbol
        return roman_numeral
        
    Complexity Analysis
    Time complexity : O(1)O(1).
    As there is a finite set of roman numerals, there is a hard upper limit on how many times the loop can iterate. This upper limit is 15 times, and it occurs for the number 3888, which has a representation of MMMDCCCLXXXVIII. Therefore, we say the time complexity is constant, i.e. O(1)O(1).

    Space complexity : O(1)O(1)
    The amount of memory used does not change with the size of the input integer, and is therefore constant.
    */
    public String intToRoman(int num) {
        if(num<=0) return null;
        
        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        String[] symbols = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
        
        StringBuilder sb = new StringBuilder();
        
        // loop over symbols
        for(int i=0; i<values.length; i++)
        {
            while(values[i] <= num)
            {
                num -= values[i];
                sb.append(symbols[i]);
            }
        }
        
        return sb.toString();
    }
}
