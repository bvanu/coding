/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 *
 * Complexity Analysis
 * Time complexity : \mathcal{O}(N)O(N), where N is a number of nodes in the tree, since one visits each node exactly once.
 * Space complexity : \mathcal{O}(\log(N))O(log(N)) in the best case of completely balanced tree and \mathcal{O}(N)O(N) in the worst case of completely unbalanced tree, to keep a recursion stack.
 */
class Solution {
    public boolean isSameTree(TreeNode root1, TreeNode root2) {
        return (root1==null && root2==null) ||
            (root1!=null && root2!=null && 
             root1.val==root2.val && 
             isSameTree(root1.left, root2.left) &&
             isSameTree(root1.right, root2.right));
    }
}
