/**
LinkedIn

Complexity Analysis
Time complexity : O(n)O(n), in length nn of the string. We traverse over each character at-most once, until the two pointers meet in the middle, or when we break and return early.
Space complexity : O(1)O(1). No extra space required, at all.
**/

class Solution {
    public boolean isPalindrome(String s) {
        if(s==null) return false;
        if(s.length()<1) return true;
        
        int start = 0, end = s.length()-1;
        
        while(start<end)
        {
            while(start<end && !Character.isLetterOrDigit(s.charAt(start)))
                start++;
            
            while(start<end && !Character.isLetterOrDigit(s.charAt(end)))
                end--;
            
            if(start<end && Character.toLowerCase(s.charAt(start))!=Character.toLowerCase(s.charAt(end)))
                return false;
            
            start++;
            end--;
        }
        
        return true;
    }
}
