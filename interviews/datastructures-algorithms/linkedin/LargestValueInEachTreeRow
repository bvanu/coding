/*
Linkedin

Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).

Example 1:
Input: root = [1,3,2,5,3,null,9]
Output: [1,3,9]

Example 2:
Input: root = [1,2,3]
Output: [1,3]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    /*
    Approach #1: BFS
    
    TC: O(nk)
    SC: O(n)
    */
    public List<Integer> largestValues(TreeNode root) {
        if(root==null) return new ArrayList<Integer>();
        
        List<Integer> largestValues = new ArrayList<Integer>();
        Queue<TreeNode> que = new LinkedList<TreeNode>();
        int level = 0, levelMax, size;
        
        
        que.add(root);
        
        while(!que.isEmpty())
        {
            size = que.size(); // DONT DO tempQue = que, this makes tempQue point to que
            levelMax = Integer.MIN_VALUE;
                
            // iterate over the queue
            for(int i=0; i<size; i++)
            {
                TreeNode node = que.poll();
                
                levelMax = Math.max(levelMax, node.val);
                
                if(node.left!=null) que.offer(node.left);
                if(node.right!=null) que.offer(node.right);
            }
            
            largestValues.add(levelMax);
            level++;
        }
        
        return largestValues;
    }
}
