/*
Linkedin

Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list.

word1 and word2 may be the same and they represent two individual words in the list.

Example:
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Input: word1 = “makes”, word2 = “coding”
Output: 1

Input: word1 = "makes", word2 = "makes"
Output: 3

Note:
You may assume word1 and word2 are both in the list.
*/

class Solution {
    /*
    Approach #1:
    
    TC: O(n) for travesing all words in list
    SC: O(n) for the HashMap
    */
    public int shortestWordDistance1(String[] words, String word1, String word2) {
        if(words == null || words.length <= 1) return -1;
        
        Map<String, List<Integer>> map = new HashMap<String, List<Integer>>();
        int idx = 0;
        
        for(String word: words)
        {
            List<Integer> list;
            
            if(map.containsKey(word))
                list = map.get(word);
            else
                list = new ArrayList<Integer>();
            
            list.add(idx++);
            map.put(word, list);
        }
        
        List<Integer> list1 = map.get(word1);
        List<Integer> list2 = map.get(word2);
        int minDistane = words.length;
        
        for(int i: list1)
        {
            for(int j: list2)
            {
                if(word1.equals(word2) && i==j) continue;
                
                if(Math.abs(i-j) < minDistane)
                    minDistane = Math.abs(i-j);
            }
        }
        
        return minDistane;
    }
    
    /*
    Appraoch #2: Without extra space
    
    TC: O(n)
    SC: O(1)
    */
    public int shortestWordDistance(String[] words, String word1, String word2)
    {
        if(words == null || words.length < 2) return -1;
        
        int index = -1, min = words.length;
        
        for(int i=0; i<words.length; i++)
        {
            if(words[i].equals(word1) || words[i].equals(word2))
            {
                if(index != -1 && (word1.equals(word2) || !words[index].equals(words[i]))) // !words[index].equals(words[i]) this is for the case where word1 != word2
                {
                    min = Math.min(i-index, min);
                }
                
                index = i;
            }
        }
        
        return min;
    }
}
