/**
Linkedin

Given a string, your task is to count how many palindromic substrings in this string.
The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:
Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
 

Example 2:
Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
**/

class Solution {
    /**
    Approach #1: Brute-force
    
    331ms
    TC: O(n^3)
    SC: O(n)
    **/
    
    public int countSubstrings(String s) {
        if(s==null || s.length()<1)
            return 0;
        
        char[] chrArr = s.toCharArray();
        int n = s.length();
        int count = 0;
        
        for(int i=0; i<n; i++)
        {
            for(int j=i; j<n; j++)
            {
                if(isPalindrome(s.substring(i, j+1)))
                    count++;
            }
        }
        
        return count;
    }
    
    private boolean isPalindrome(String s)
    {
        int start = 0;
        int end = s.length()-1;
        
        while(start<end)
        {
            if(s.charAt(start++) != s.charAt(end--))
                return false;
        }
        
        return true;
    }
    
    /**
    Approach #2: Extend palindrome
    
    Idea is start from each index and try to extend palindrome for both odd and even length.
    
    3ms
    TC: O(n^2)
    SC: O(1)
    **/
    
    public int countSubstrings2(String s)
    {
        int n = s.length();
        
        if(s==null || s.length()<1)
           return 0;
        
        int count = 0;
        
        for(int i=0; i<n; i++)
        {
            count += extendPalindrome(s, i, i); // odd length
            count += extendPalindrome(s, i, i+1); // even length
        }
        
        return count;
    }
    
    private int extendPalindrome(String s, int left, int right)
    {
        int count = 0;
        
        while(left>=0 && right<s.length() && s.charAt(left--)==s.charAt(right++))
            count++;
        
        return count;
    }
}
