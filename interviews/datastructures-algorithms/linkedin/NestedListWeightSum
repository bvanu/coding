/**
LinkedIn
**/

/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    int sum = 0;
    
    public int depthSum(List<NestedInteger> nestedList) { 
        int depth = 1;
        
        return depthSum(nestedList, depth);
    }
    
    
    public int depthSum(List<NestedInteger> nestedList, int depth) {      
        
        //for(NestedInteger ni: nestedList)
        for(int i=0; i<nestedList.size(); i++)
        {   
            //System.out.println("i:" + i);
            NestedInteger ni = nestedList.get(i);
            
            if(ni.isInteger())
            {
                //System.out.println("in if() ni = " + ni.getInteger() + " depth= " + depth);
                sum += ni.getInteger()*depth;
                //System.out.println("in if() sum = " + sum);
            }
            else
            {
                //System.out.println("in else()" + " depth= " + depth);
                depthSum(ni.getList(), depth+1);
            }
        }
        
        return sum; // return statements should be outside the loop otherwise it breaks the the loop and returns back
    }
}
