/**
LinkedIn

You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:
Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
**/
class Solution {
    
    /** 
    Approach 1: Recursion with Memoization
    
    Complexity Analysis
    Time complexity : O(n). Size of recursion tree can go upto n.
    Space complexity : O(n). The depth of recursion tree can go upto n.
    **/
    public int climbStairs1(int n) {
        int[] memo = new int[n+1];
        return climbStairs(0, n, memo);
    }
    
    public int climbStairs(int i, int n, int[] memo)
    {
        if(i>n)
            return 0;
        
        if(i==n)
            return 1;
        
        if(memo[i]>0)
            return memo[i];
        
        memo[i] = climbStairs(i+1, n, memo) + climbStairs(i+2, n, memo);
        
        return memo[i];
    }
    
    /**
    Approach 2: Fibonacci Number
    
    Algorithm:
    In the above approach we have used dpdp array where dp[i]=dp[i-1]+dp[i-2]dp[i]=dp[i−1]+dp[i−2]. It can be easily analysed that dp[i]dp[i] is nothing but ith fibonacci number.
    Fib(n)=Fib(n-1)+Fib(n-2)Fib(n)=Fib(n−1)+Fib(n−2)
    Now we just have to find nth number of the fibonacci series having 11 and 22 their first and second term respectively, i.e. Fib(1)=1Fib(1)=1 and Fib(2)=2Fib(2)=2.
    
    Time complexity : O(n). Single loop upto nn is required to calculate nth fibonacci number.
    Space complexity : O(1). Constant space is used.
    **/
    public int climbStairs(int n)
    {
        if(n==1) return 1;
        
        int first = 1;
        int second = 2;
        
        for(int i=3; i<=n; i++)
        {
            int third = first + second;
            
            first = second;
            second = third;
        }
        
        return second;
    }
}
