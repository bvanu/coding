/**
 * Linkedin
 * a binary search tree (BST), also called an ordered or sorted binary tree, is a rooted binary tree whose internal nodes each store a key greater than all the keys in the 
 * node's left subtree and less than those in its right subtree. A binary tree is a type of data structure for storing data such as numbers in an organized way.
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class BSTIterator {
    /**
    Approach #1: Inorder traversal
    
    Complexity analysis:

    Time complexity : O(N) is the time taken by the constructor for the iterator. The problem statement only asks us to analyze the complexity of the two functions, however, when implementing a class, it's important to also note the time it takes to initialize a new object of the class and in this case it would be linear in terms of the number of nodes in the BST. In addition to the space occupied by the new array we initialized, the recursion stack for the inorder traversal also occupies space but that is limited to O(h)O(h) where hh is the height of the tree.
    next() would take O(1)
    hasNext() would take O(1)
    Space complexity : O(N) since we create a new array to contain all the nodes of the BST. This doesn't comply with the requirement specified in the problem statement that the maximum space complexity of either of the functions should be O(h) where h is the height of the tree and for a well balanced BST, the height is usually logN. So, we get great time complexities but we had to compromise on the space. Note that the new array is used for both the function calls and hence the space complexity for both the calls is O(N).
    **/
    ArrayList<Integer> nodesSorted;
    int idx;
    
    public BSTIterator(TreeNode root) {
        // Array containing all the nodes in the sorted order
        this.nodesSorted = new ArrayList<Integer>();
        
        // Pointer to the next smallest element in the BST
        this.idx = 0;
        
        // Call to flatten the input binary search tree
        inorder(root);
    }
    
    /** @return the next smallest number */
    public int next() {
        if(hasNext())
            return nodesSorted.get(idx++);
        else
            return -1;
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return idx<nodesSorted.size();
    }
    
    private void inorder(TreeNode root)
    {
        if(root == null) return;
        
        inorder(root.left);
        this.nodesSorted.add(root.val);
        inorder(root.right);
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
