   /**
    Approach #1 (One-pass)

    Algorithm:
    We can greatly improve on the brute-force approach by keeping two indices i1 and i2 where we store the most recent locations of word1 and word2. Each time we find a new occurrence of one of the words, we do not need to search the entire array for the other word, since we already have the index of its most recent occurrence.
    
    TC: O(1)
    SC: O(1)
**/
    public int shortestDistance(String[] words, String word1, String word2) {
        if(words==null || words.length<1)
            return -1;
        
        // Are words in list? Assume they are else handle this case too
        
        // Are words equal?
        if(word1.equals(word2))
            return 0;
                
        int i1 = -1;
        int i2 = -1;
        int shortestDistance = words.length;
        
        // Find indices of word1 and word2 - TC: O(n)
        for(int i=0; i<words.length; i++)
        {
            if(words[i].equals(word1))
                i1 = i;
            else if(words[i].equals(word2))
                i2 = i;
            
            if(i1!=-1 && i2!=-1)
            {
                shortestDistance = Math.min(shortestDistance, Math.abs(i1-i2));
            }
        }
        
        return shortestDistance;
    }
    
    public int shortestDistance2(String[] words, String word1, String word2)
    {
         if(words == null || words.length < 2) return -1;
        
        int index = -1, min = words.length;
        
        for(int i=0; i<words.length; i++)
        {
            if(words[i].equals(word1) || words[i].equals(word2))
            {
                if(index != -1 && !words[index].equals(words[i])) // !words[index].equals(words[i]) this is for the case where word1 != word2
                {
                    min = Math.min(i-index, min);
                }
                
                index = i;
            }
        }
        
        return min;
    }


/*
Linkedin

Find distance between 2 words in the given list of strings

TC: O(n^2) worst case if list contains only word1's and word2's
SC: O(n) for the Hash Map
*/
class WordDistance {
    Map<String, List<Integer>> map = new HashMap<String, List<Integer>>();
    
    public WordDistance(String[] words) {
        int idx = 0;
        for(String word: words)
        {
            List<Integer> tempList = map.getOrDefault(word, new ArrayList<Integer>());
            tempList.add(idx++);
            map.put(word, tempList);
        }
    }
    
    public int shortest(String word1, String word2) {
        List<Integer> word1Indices = map.getOrDefault(word1, new ArrayList<Integer>());
        List<Integer> word2Indices = map.getOrDefault(word2, new ArrayList<Integer>());
        
        int shortestDistance = Integer.MAX_VALUE;
        
        for(int i1: word1Indices)
        {
           for(int i2: word2Indices)
           {
                if(Math.abs(i1-i2)<shortestDistance)
                    shortestDistance = Math.abs(i1-i2);
           } 
        }
        
        return shortestDistance;
    }
}

/**
 * Your WordDistance object will be instantiated and called as such:
 * WordDistance obj = new WordDistance(words);
 * int param_1 = obj.shortest(word1,word2);
 */
