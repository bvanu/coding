//Linkedin
class Solution {
    /**
    Approach #1: Brute force
    Time limit exceeded.
    
    Complexity Analysis
    Time complexity : O(n)O. We will multiply x for n times.
    Space complexity : O(1). We only need one variable to store the final product of x.
    **/
    public double myPow1(double x, int n) {
        long N = n;
        if (N < 0) {
            x = 1 / x;
            N = -N;
        }
        double ans = 1;
        for (long i = 0; i < N; i++)
            ans = ans * x;
        return ans;
    }
    
    /**
    Approch #2: Fast Power Algorithm Recursive
Intuition

Assuming we have got the result of x ^ nx 
n
 , how can we get x ^ {2 * n}x 
2∗n
  ? Obviously we do not need to multiply x for another n times. Using the formula (x ^ n) ^ 2 = x ^ {2 * n}(x 
n
 ) 
2
 =x 
2∗n
 , we can get x ^ {2 * n}x 
2∗n
  at the cost of only one computation. Using this optimization, we can reduce the time complexity of our algorithm.

Algorithm

Assume we have got the result of x ^ {n / 2}x 
n/2
 , and now we want to get the result of x ^ nx 
n
 . Let A be result of x ^ {n / 2}x 
n/2
 , we can talk about x ^ nx 
n
  based on the parity of n respectively. If n is even, we can use the formula (x ^ n) ^ 2 = x ^ {2 * n}(x 
n
 ) 
2
 =x 
2∗n
  to get x ^ n = A * Ax 
n
 =A∗A. If n is odd, then A * A = x ^ {n - 1}A∗A=x 
n−1
 . Intuitively, We need to multiply another xx to the result, so x ^ n = A * A * xx 
n
 =A∗A∗x. This approach can be easily implemented using recursion. We call this method "Fast Power", because we only need at most O(\log n)O(logn) computations to get x ^ nx 
n
 .
    
    Complexity Analysis
    Time complexity : O(logn). Each time we apply the formula (x ^ n) ^ 2 = x ^ {2 * n}
    Space complexity : O(logn). For each computation, we need to store the result of x ^ {n / 2}. We need to do the computation for O(logn) times, so the space complexity is O(logn).
    **/
    public double myPow(double x, int n)
    {
        if(n<0)
        {
            x = 1/x;
            n = -n;
        }
        
        return fastPow(x, n);
    }
    
    private double fastPow(double x, int n)
    {
        if(n == 0)
            return 1.0;
        
        double half = fastPow(x, n/2);
        
        if(n%2 == 0)
            return half * half;
        else
            return half * half * x;
    }   
}
