/**
Linkedin

Given two nodes of a binary tree p and q, return their lowest common ancestor (LCA).
Each node will have a reference to its parent node. 
According to the definition of LCA on Wikipedia: "The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself)."

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Complexity Analysis:
Time complexity : O(m+n)O(m+n).
Space complexity : O(m)O(m) or O(n)O(n)

**/

/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
};
*/

class Solution {
    // Can be solved as intersection of two linkedlists
    public Node lowestCommonAncestor(Node p, Node q) {
     Set<Integer> set = new HashSet<Integer>();
        
        while(p != null)
        {
            set.add(p.val);
            p = p.parent;
        }
        
        while(q != null)
        {
            //System.out.println(q.val);
            if(set.contains(q.val))
            {
                //System.out.println("in if: " + q.val);
                return q;
            }
            
            q = q.parent;
        }
        
        return null;
    }
}
