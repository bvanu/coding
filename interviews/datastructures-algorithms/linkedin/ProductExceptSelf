//Linkedin

class Solution {
    /**
    Approach #1: Left and Right product lists
    It's much easier to build an intuition for solving this problem without division once you visualize how the different products except self look like for each of the elements. So, let's take a look at an example array and the different products.


    Looking at the figure about we can figure another way of computing those different product values.

    Instead of dividing the product of all the numbers in the array by the number at a given index to get the corresponding product, we can make use of the product of all the numbers to the left and all the numbers to the right of the index. Multiplying these two individual products would give us the desired result as well.

    For every given index, ii, we will make use of the product of all the numbers to the left of it and multiply it by the product of all the numbers to the right. This will give us the product of all the numbers except the one at the given index ii. Let's look at a formal algorithm describing this idea more concretely.

    Algorithm

    Initialize two empty arrays, L and R where for a given index i, L[i] would contain the product of all the numbers to the left of i and R[i] would contain the product of all the numbers to the right of i.
    We would need two different loops to fill in values for the two arrays. For the array L, L[0]L[0] would be 1 since there are no elements to the left of the first element. For the rest of the elements, we simply use L[i] = L[i - 1] * nums[i - 1]L[i]=L[i−1]∗nums[i−1]. Remember that L[i] represents product of all the elements to the left of element at index i.
    For the other array, we do the same thing but in reverse i.e. we start with the initial value of 1 in R[length - 1]R[length−1] where lengthlength is the number of elements in the array, and keep updating R[i] in reverse. Essentially, R[i] = R[i + 1] * nums[i + 1]R[i]=R[i+1]∗nums[i+1]. Remember that R[i] represents product of all the elements to the right of element at index i.
    Once we have the two arrays set up properly, we simply iterate over the input array one element at a time, and for each element at index i, we find the product except self as L[i] * R[i]L[i]∗R[i].

    Complexity analysis
    Time complexity : O(N) where N represents the number of elements in the input array. We use one iteration to construct the array L, one to construct the array R and one last to construct the answeranswer array using L and R.
    Space complexity : O(N) used up by the two intermediate arrays that we constructed to keep track of product of elements to the left and right.
    **/
    public int[] productExceptSelf1(int[] nums) {
        if(nums == null || nums.length<1) return null;
        
        int n = nums.length;
        int[] L = new int[n];
        int[] R = new int[n];
        int[] ans = new int[n];
        
        L[0] = 1;
        R[n-1] = 1;
        
        // compute left product array
        for(int i=1; i<n; i++)
            L[i] = L[i-1] * nums[i-1];
        
        // compute right product array - reverse
        for(int i=n-2; i>=0; i--)
            R[i] = R[i+1] * nums[i+1];
        
        // compute prod except itself
        for(int i=0; i<n; i++)
            ans[i] = L[i]*R[i];
        
        return ans;
    }
    /**
    Approach 2: O(1) space approach
    Although the above solution is good enough to solve the problem since we are not using division anymore, there's a follow-up component as well which asks us to solve this using constant space. Understandably so, the output array does not count towards the space complexity. This approach is essentially an extension of the approach above. Basically, we will be using the output array as one of L or R and we will be constructing the other one on the fly. Let's look at the algorithm based on this idea.

    Algorithm

    Initialize the empty answer array where for a given index i, answer[i] would contain the product of all the numbers to the left of i.
    We construct the answer array the same way we constructed the L array in the previous approach. These two algorithms are exactly the same except that we are trying to save up on space.
    The only change in this approach is that we don't explicitly build the R array from before. Instead, we simply use a variable to keep track of the running product of elements to the right and we keep updating the answer array by doing answer[i] = answer[i] * Ranswer[i]=answer[i]∗R. For a given index i, answer[i] contains the product of all the elements to the left and R would contain product of all the elements to the right. We then update R as R = R * nums[i]R=R∗nums[i]

    Complexity analysis
    Time complexity : O(N) where NN represents the number of elements in the input array. We use one iteration to construct the array LL, one to update the array answeranswer.
    Space complexity : O(1) since don't use any additional array for our computations. The problem statement mentions that using the answeranswer array doesn't add to the space complexity.
**/
    public int[] productExceptSelf(int[] nums)
    {
        if(nums == null || nums.length<1) return null;
        
        int n = nums.length;
        int[] ans = new int[n];
        int R = 1;
        
        ans[0] = 1;
        
        // left prod
        for(int i=1; i<n; i++)
            ans[i] = ans[i-1] * nums[i-1];
        
        // right prod
        for(int i=n-2; i>=0; i--)
        {
            R = R * nums[i+1]; // we need this variable to sotre running product of right array
            ans[i] = ans[i] * R;
        }
        
        return ans;
    }
}
