/*
You live in San Francisco city and want to minimize your commute time to the Databricks HQ.

Given a 2D matrix of the San Francisco grid and the time as well as cost matrix of all the available transportation
modes, return the fastest mode of transportation. If there are multiple such modes then return one with the least cost.


Sample Input:

2D Grid:              Legend:
|3|3|S|2|X|X|         X = Roadblock
|3|1|1|2|X|2|         S = Source
|3|1|1|2|2|2|         D = Destination
|3|1|1|1|D|3|         1 = Walk, 2 = Bike, 3 = Car, 4 = Train
|3|3|3|3|3|4|
|4|4|4|4|4|4|


      S
   3.  1.  2   minommuteTime = { , 2, 1,  1}
3. 1    
   

Transportation Modes:        ["Walk", "Bike", "Car", "Train"]
Cost Matrix (Dollars/Block): [0,      1,      3,     2]
Time Matrix (Minutes/Block): [3,      2,      1,     1]

NOTE: In this example, we are only counting the blocks between 'S' and 'D' to compute the minimum time & dollar cost.

Sample Output: Bike

Rules:
1. The input grid represents the city blocks, so the commuter is only allowed to travel along the horizontal and vertical axes. 
Diagonal traversal is not permitted.
2. The commuter can only move to the neighboring cells with the same transportation mode.


*/
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

/*
1. Find the Source cell.
2. Find out all the paths from S to D with possible commeute options.
  - 1,2,3
  - bfs until I find Destination, adding up the commute (mutliple queues)
      - TC k* O(n) worst , O(log(n)) k = at max 4
3. I will minimize the time of all the  possibilities 
*/

class Solution {
  public static void main(String[] args) {
    ArrayList<String> strings = new ArrayList<String>();
    strings.add("Hello, World!");
    strings.add("Welcome to CoderPad.");
    strings.add("This pad is running Java " + Runtime.version().feature());

    for (String string : strings) {
      System.out.println(string);
    }
  }
  
  /*
  Transportation Modes:        ["Walk", "Bike", "Car", "Train"]
Cost Matrix (Dollars/Block): [0,      1,      3,     2]
Time Matrix (Minutes/Block): [3,      2,      1,     1]
*/
  
  public String shortestCommute(char[][] grid, int[] timeMatrix, int commuteOptions) {
    if(grid==null || grid.length<1) return null;
    
    Pair<Integer, Integer> source = getSource(grid);
    List<Queue<Pair<Integer, Integer>> queList = new ArrayList<>();
    int[] minCommuteTime = new int[commuteOptions];
    int m = grid.length, n = grid[0].length;
    
    for(int i=0; i<commuteOptions; i++)
      queList.add(new LinkedList<>);
    
    int[][] directions = {{0,1},{1,0},{-1,0},{0,-1}};
    Queue<Pair<Integer,Integer> que = new LinkedList<>();
    que.add(source);
    
    while(!que.isEmpty()) {
      Pair<Integer, Integer> source = que.remove();
      grid[source.getKey(), s == -1; // mark as visited
      
      for(int[] dir: directions) {
        int x = dir[0]+source.getKey();
        int y = dir[1]+source.getValue();
        
        if(x>=0 && x<m && y>=0&& y<n) {
          if(grid[x][y]=='X') continue;
          else if(grid[x][y]=='D') {
            return getMinCommuteTime(minCommuteTime); // String
          }else {
            int commuteIndex = (int) grid[x][y];
            minCommuteTime[commuteIndex] += timeMatrix[commuteIndex];
          }
        }
    }
    
      return null;
  }
    
   private String getMinCommuteTime(int[]  minCommuteTime) {
     // null cheks
     
     Arrays.sort(minCommuteTime); // asc
     
     int commuteIndex = minCommuteTime[0];
     
     swtich(commuteIndex) {
       case 0: return "Walk";
       case 1: return "Bike";
       case 2: return "Car";
       case 3: return "Train";
   }  
     
    throw new IllegalArguemntException();
}

