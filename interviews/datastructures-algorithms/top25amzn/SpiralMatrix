// Amzn25
/*
Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 
Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100

Complexity Analysis

Time Complexity: O(N)O(N), where NN is the total number of elements in the input matrix. We add every element in the matrix to our final answer.
Space Complexity:
O(1) without considering the output array, since we don't use any additional data structures for our computations.
O(N) if the output array is taken into account.
*/

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> ans = new ArrayList<Integer>();
        
        if(matrix==null || matrix.length<1)
            return null;
        
        int r1 = 0, r2 = matrix.length-1;
        int c1 = 0, c2 = matrix[0].length-1;
        
        while(r1<=r2 && c1<=c2)
        {
            // 1. Go right
            for(int c=c1; c<=c2; c++) ans.add(matrix[r1][c]);
            // 2. Go down
            for(int r=r1+1; r<=r2; r++) ans.add(matrix[r][c2]);
            if(r1<r2 && c1<c2)
            {
                // 3. Go left
                for(int c=c2-1; c>=c1; c--) ans.add(matrix[r2][c]);
                // 4. Go up
                for(int r=r2-1; r>r1; r--) ans.add(matrix[r][c1]);
            }
            r1++;
            r2--;
            c1++;
            c2--;
        }
        
        return ans;
    }
}
