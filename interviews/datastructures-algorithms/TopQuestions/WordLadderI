/*
 * Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:
Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.

Note:
Return 0 if there is no such transformation sequence.

Assumptions:
1. All words have the same length.
2. All words contain only lowercase alphabetic characters.
3. You may assume no duplicates in the word list.
4. You may assume beginWord and endWord are non-empty and are not the same.
5. BeginWord must not be present in the wordList.
6. EndWord must be present in the wordList.

Example 1:
Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog", return its length 5.

Example 2:
Input:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore no possible transformation.

Approach is BFS
Output: O(26nm) ~ O(nm)
n - number of words in the dictionary
m - length of the word
 */
 
 
 class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if(wordList == null || wordList.size() <1)
            return 0;
        
        Set<String> set = new HashSet<String>();
        boolean isPresent = false;
        
        // 1. Check if endWord is present in wordList or not. If endWord is not present in the wordList, return 0, no transformation is possible
        for(String word :  wordList)
        {
            if(word.equals(endWord))
                isPresent = true;
            set.add(word);
        }
        
        if(!isPresent)
         return 0;
        
        // 2. Do BFS on Graph (asthis is polynomial but DFS on Graph is exponential) to find shortest distance to endWord
        Queue<String> que = new LinkedList<String>();
        que.add(beginWord);
        int depth = 0;
        
        // 2a. go level by level
        while(!que.isEmpty())
        {
            int levelSize = que.size();
            depth++;
            
            // 2b. For each word in the queue, find the words with 1 edit distance
            while(levelSize-->0)
            {
                char[] currWord = que.poll().toCharArray();
                //char[] currWord = wrd.toCharArray();
                
                // 2c. For each index, check for all possible 1 depth words
                for(int i=0; i<currWord.length; i++)
                {
                    char item = currWord[i]; // actual letter
                    
                    // 2d. Change each letter in the currWord and check if equals to word
                    for(char c='a'; c<='z'; c++)
                    {  
                        if(item != c)
                            currWord[i] = c;
                        
                        String newWord = new String(currWord);
                        
                        if(set.contains(newWord))
                        {
                        // 2e. Return depth if you found endWord
                            if(newWord.equals(endWord))
                                return depth+1;
                            
                            set.remove(newWord);
                            que.add(newWord);
                        }
                    }
                    
                    currWord[i] = item;
                }
            }
        }
        
        return 0;
    }
}
