/*
Given a non-empty 2D matrix matrix and an integer k, find the max sum of a rectangle in the matrix such that its sum is no larger than k.
Example:
Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2 
Explanation: Because the sum of rectangle [[0, 1], [-2, 3]] is 2,
             and 2 is the max number no larger than k (k = 2).
Note:
The rectangle inside the matrix must have an area > 0.
What if the number of rows is much larger than the number of columns?
*/

class MaxSumSubMatrix {
    public int maxSumSubmatrix(int[][] matrix, int k) {
        if(matrix==null || matrix.length<1)
            return -1;
        
        int rows = matrix.length;
        int cols = matrix[0].length;
        
        int maxSumSoFar = Integer.MIN_VALUE;
        int[] tempArr = new int[rows];
        
        for(int L=0; L<cols; L++)
        {
            for(int i=0; i<tempArr.length; i++)
                tempArr[i] = 0;
            
            for(int R=L; R<cols; R++)
            {
                for(int i=0; i<tempArr.length; i++)
                    tempArr[i] += matrix[i][R];
                
                KadaneResult kadaneResult = kadane(tempArr);
                
                if(kadaneResult!=null && kadaneResult.maxSum<=k && kadaneResult.maxSum > maxSumSoFar)
                {
                    maxSumSoFar = kadaneResult.maxSum;
                    //System.out.println("in" + maxSumSoFar);
                }
                //System.out.println("out" + maxSumSoFar);
            }
        }
        
        return maxSumSoFar;
    }
    
    class KadaneResult
    {
        int maxSum;
        int start;
        int end;
        
        public KadaneResult(int maxSum, int start, int end)
        {
            this.maxSum = maxSum;
            this.start = start;
            this.end = end;
        }
    }
    
    private KadaneResult kadane(int[] arr)
    {
        if(arr==null || arr.length<1)
            return null;
        
        int maxSum = 0;
        int start = -1; 
        int end = -1;
        
        int currSum = 0;
        int currStart = 0;
        
        int maxNegSum = Integer.MIN_VALUE;
        boolean areAllNegative = true;
        
        for(int i=0; i<arr.length; i++)
        {
            if(areAllNegative && arr[i]<0)
            {
                if(arr[i]>maxNegSum)
                {
                    maxNegSum = arr[i];
                    start = i;
                    end = i;
                }
                
            }
            else
                areAllNegative = false;
            
            currSum += arr[i];
            
            if(currSum<0)
            {
                currSum = 0;
                currStart = i+1;
            }
            
            if(currSum>maxSum)
            {
                maxSum = currSum;
                start = currStart;
                end = i;
            }
        }
        maxSum = areAllNegative? maxNegSum : maxSum;
        
        return new KadaneResult(maxSum, start, end);
    }
}
